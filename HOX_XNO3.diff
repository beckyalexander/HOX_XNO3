From b0ebb1cce7d75b40781184b75b048dd7bbdecbc2 Mon Sep 17 00:00:00 2001
From: Becky Alexander <beckya@atmos.washington.edu>
Date: Thu, 27 Jun 2024 15:35:02 -0700
Subject: [PATCH 1/8] Remove unnecessary slash in file path in photolysis_mod.
 Don't do this if it's not a problem for you.

---
 GeosCore/photolysis_mod.F90 | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/GeosCore/photolysis_mod.F90 b/GeosCore/photolysis_mod.F90
index 0eaf45bad..8b6a72fe4 100644
--- a/GeosCore/photolysis_mod.F90
+++ b/GeosCore/photolysis_mod.F90
@@ -936,7 +936,8 @@ CONTAINS
 
        ! Choose different set of input files for standard (trop+strat chenm)
        ! and tropchem (trop-only chem) simulations
-       THISFILE = TRIM( DATA_DIR ) // '/' // TRIM( SPECFIL(k) )
+!       THISFILE = TRIM( DATA_DIR ) // '/' // TRIM( SPECFIL(k) )
+       THISFILE = TRIM( DATA_DIR ) // TRIM( SPECFIL(k) )
 
        !--------------------------------------------------------------
        ! In dry-run mode, print file path to dryrun log and cycle.
-- 
2.30.2


From 8c4fd6914a74e0517d7d2932fdb0e1614d1d97a7 Mon Sep 17 00:00:00 2001
From: Becky Alexander <beckya@atmos.washington.edu>
Date: Fri, 5 Jul 2024 11:48:45 -0700
Subject: [PATCH 2/8] Added competing reactions HOI + SO2/Cl-/Br- in clouds.

---
 GeosCore/fullchem_mod.F90                 |   7 +-
 KPP/fullchem/commonIncludeVars.H          |   9 +-
 KPP/fullchem/fullchem.eqn                 |  11 +-
 KPP/fullchem/fullchem_RateLawFuncs.F90    | 463 ++++++++++++++++++++++
 KPP/fullchem/fullchem_SulfurChemFuncs.F90 |  39 +-
 5 files changed, 514 insertions(+), 15 deletions(-)

diff --git a/GeosCore/fullchem_mod.F90 b/GeosCore/fullchem_mod.F90
index de50dfa2a..86dd833c9 100644
--- a/GeosCore/fullchem_mod.F90
+++ b/GeosCore/fullchem_mod.F90
@@ -558,9 +558,10 @@ CONTAINS
        K_CLD     = 0.0_dp                   ! Sulfur in-cloud rxn het rates
        K_MT      = 0.0_dp                   ! Sulfur sea salt rxn het rates
        CFACTOR   = 1.0_dp                   ! KPP conversion factor
-       SRO3      = 0.0_dp                   ! Enhanced sulfate production of
-       SRHOBr    = 0.0_dp                   !  O3, HOBr, HCl in size-resolved
-       SRHOCl    = 0.0_dp                   !  cloud droplets
+       SRO3      = 0.0_dp                   ! Enhanced sulfate production by
+       SRHOBr    = 0.0_dp                   ! O3, HOBr, HOCl, HOI oxidation in 
+       SRHOCl    = 0.0_dp                   ! size-resolved
+       SRHOI     = 0.0_dp                   ! cloud droplets
 #ifdef MODEL_CLASSIC
 #ifndef NO_OMP
        Thread    = OMP_GET_THREAD_NUM() + 1 ! OpenMP thread number
diff --git a/KPP/fullchem/commonIncludeVars.H b/KPP/fullchem/commonIncludeVars.H
index b7b8881d7..d788126eb 100644
--- a/KPP/fullchem/commonIncludeVars.H
+++ b/KPP/fullchem/commonIncludeVars.H
@@ -104,10 +104,10 @@
   !$OMP THREADPRIVATE( H_PLUS )
 
   ! Enhanced sulfate production from SO2 oxidation by HOBr, HOCl, 
-  ! and O3 in size-resolved cloud droplets [cm3/molec/s]
-  ! -- Becky Alexander (30 Jan 2023)
-  REAL(dp) :: SRHOBr, SRHOCl, SRO3	
-  !$OMP THREADPRIVATE( SRHOBr, SRHOCl, SRO3 )
+  ! HOI, and O3 in size-resolved cloud droplets [cm3/molec/s]
+  ! -- Becky Alexander (30 Jan 2023, 5 July 2024)
+  REAL(dp) :: SRHOBr, SRHOCl, SRO3, SRHOI	
+  !$OMP THREADPRIVATE( SRHOBr, SRHOCl, SRHOI, SRO3 )
   
   TYPE, PUBLIC :: HetState
      REAL(dp) :: AVO            ! Avogadro's constant [molec/mol]
@@ -150,6 +150,7 @@
      REAL(dp) :: frac_SO3_aq    ! SO3_aq  / ( HSO3_aq + SO3_aq )
      REAL(dp) :: fupdateHOBr    ! Correction factor - HOBr
      REAL(dp) :: fupdateHOCl    ! Correction factor - HOCl
+     REAL(dp) :: fupdateHOI     ! Correction factor - HOI
      REAL(dp) :: gamma_HO2      ! Uptake probability for HO2  [1]
      REAL(dp) :: H2O            ! H2O concentration
      REAL(dp) :: HBr_theta      ! HBr theta for uptake on ice
diff --git a/KPP/fullchem/fullchem.eqn b/KPP/fullchem/fullchem.eqn
index 9d7ea2b2e..5b28e1020 100644
--- a/KPP/fullchem/fullchem.eqn
+++ b/KPP/fullchem/fullchem.eqn
@@ -1468,6 +1468,9 @@ HI = ISALA :                   IuptkBySALA1stOrd( SR_MW(ind_HI), 0.10_dp, State_
 HI = ISALC :                   IuptkBySALC1stOrd( SR_MW(ind_HI), 0.10_dp, State_Het );                      {2017/09/22; Sherwen2016b;TS,JAS,SDE}
 HOI = ISALA :                  IuptkByAlkSALA1stOrd( SR_MW(ind_HOI), 0.01_dp, State_Het );                  {2023/01/24; Restored deleted rxn:BA}
 HOI = ISALC :                  IuptkByAlkSALC1stOrd( SR_MW(ind_HOI), 0.01_dp, State_Het );                  {2022/12/02; Restored deleted rxn:BA}
+HOI + SO2 = SO4 + HI :         HOIUptkByHSO3m( State_Het ) + HOIUptkBySO3mm( State_Het ) + SRHOI;           {2024/07/05; BAlexander}
+HOI + HBr = IBr + H2O :        HOIUptkByHBr( State_Het ) ;                                                  {2024/07/05; BAlexander}
+HOI + HCl = ICl + H2O :        HOIUptkByHCl( State_Het ) ;                                                  {2024/07/05; BAlexander}
 I2O2 = 2.000AERI :             IuptkBySulf1stOrd( SR_MW(ind_I2O2), 0.02_dp, State_Het );                    {2017/09/22; Sherwen2016b;TS,JAS,SDE}
 I2O2 = 2.000ISALA :            IuptkBySALA1stOrd( SR_MW(ind_I2O2), 0.02_dp, State_Het );                    {2017/09/22; Sherwen2016b;TS,JAS,SDE}
 I2O2 = 2.000ISALC :            IuptkBySALC1stOrd( SR_MW(ind_I2O2), 0.02_dp, State_Het );                    {2017/09/22; Sherwen2016b;TS,JAS,SDE}
@@ -1490,10 +1493,10 @@ IONO2 + BrSALA = IBr + HNO3 :  IbrkdnByAcidBrSALA( SR_MW(ind_IONO2), C(ind_IONO2
 IONO2 + BrSALC = IBr + HNO3 :  IbrkdnByAcidBrSALC( SR_MW(ind_IONO2), C(ind_IONO2), 0.01_dp, State_Het );    {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
 IONO2 + SALACL = ICl + HNO3 :  IbrkdnByAcidSALACl( SR_MW(ind_IONO2), C(ind_IONO2), 0.01_dp, State_Het );    {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
 IONO2 + SALCCL = ICl + HNO3 :  IbrkdnByAcidSALCCl( SR_MW(ind_IONO2), C(ind_IONO2), 0.01_dp, State_Het );    {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
-HOI + BrSALA = IBr :           IbrkdnByAcidBrSALA( SR_MW(ind_HOI), C(ind_HOI), 0.01_dp, State_Het );        {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
-HOI + BrSALC = IBr :           IbrkdnByAcidBrSALC( SR_MW(ind_HOI), C(ind_HOI), 0.01_dp, State_Het );        {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
-HOI + SALACL = ICl :           IbrkdnByAcidSALACl( SR_MW(ind_HOI), C(ind_HOI), 0.01_dp, State_Het );        {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
-HOI + SALCCL = ICl :           IbrkdnByAcidSALCCl( SR_MW(ind_HOI), C(ind_HOI), 0.01_dp, State_Het );        {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
+HOI + BrSALA = IBr :           HOIUptkByBrSALA( State_Het ) ;                                      ;        {2024/07/05; BAlexander}
+HOI + BrSALC = IBr :           HOIUptkByBrSALC( State_Het ) ;                                      ;        {2024/07/05; BAlexander}
+HOI + SALACL = ICl :           HOIUptkBySALACl( State_Het ) ;                                      ;        {2024/07/05; BAlexander}
+HOI + SALCCL = ICl :           HOIUptkBySALCCl( State_Het ) ;                                      ;        {2024/07/05; BAlexander}
 GLYX = SOAGX :                 GLYXuptk1stOrd( SR_MW(ind_GLYX), State_Het);                                 {2017/06/15; Marais2016, EAM}
 MGLY = 1.500SOAGX :            MGLYuptk1stOrd( SR_MW(ind_MGLY), State_Het);                                 {2017/06/15; Marais2016, EAM; 2023/04/18; Bates2023; KHB}
 IEPOXA = SOAIE :               IEPOXuptk1stOrd( SR_MW(ind_IEPOXA), .FALSE., State_Het );                    {2017/06/15; Marais2016, EAM}
diff --git a/KPP/fullchem/fullchem_RateLawFuncs.F90 b/KPP/fullchem/fullchem_RateLawFuncs.F90
index 246289eee..da3e0dc02 100644
--- a/KPP/fullchem/fullchem_RateLawFuncs.F90
+++ b/KPP/fullchem/fullchem_RateLawFuncs.F90
@@ -2541,6 +2541,198 @@ CONTAINS
     ENDIF
   END FUNCTION IbrkdnbyAcidSALCCl
 
+  FUNCTION HOIUptkByBrSALA( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOI + BrSALA reaction.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: ssarea,       branch,    branch_0
+    REAL(dp) :: brLiq,        gammaAer,  gammaLiq
+    REAL(dp) :: k_HOI_Cl,    k_HOI_Br, k_HOI_HSO3m
+    REAL(dp) :: k_HOI_SO3mm, k_tot,     srMw
+    !
+    k        = 0.0_dp
+    brLiq    = 0.0_dp
+    gammaAer = 0.01_dp
+    gammaLiq = 0.0_dp
+    srMw     = SR_MW(ind_HOI)
+    !
+
+    IF ( H%stratBox ) RETURN
+
+!    IF (  .not. H%stratBox ) THEN
+       !
+       ! HOI + Br- rxn probability in tropospheric liquid cloud. Assume same rate constants
+       ! for HOI + Br-/Cl- as HOBr + Br-/Cl- because Mossinger & Cox [2001] show that the
+       ! gamma values for the HOI reactions is the same as for the HOBr reactions
+       CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                &
+                        k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
+       !
+       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
+       ! as in aerosol (IBr:ICl = 0.15:0.85)
+       brLiq = 0.15_dp * H%frac_Br_CldA
+       !
+       ! Compute overall HOI removal rate in cloud
+       k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, brLiq, 0.0_dp )
+       !
+!    ENDIF
+    !
+    ! Now consider HOI uptake by acidic BrSALA in clear-sky
+    IF ( H%SSA_is_Acid ) THEN
+       ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSA) * H%xArea(SSA)
+!       k = 0.15_dp * IuptkBySALA1stOrd( srMw, gamma, H )
+       k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gammaAer )
+       k = kIIR1Ltd( C(ind_HOI), C(ind_BrSALA), k ) ! HOI is limiting, so update k
+    ENDIF
+
+  END FUNCTION HOIUptkByBrSALA
+
+  FUNCTION HOIUptkByBrSALC( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOI + BrSALA reaction.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: ssarea,       branch,    branch_0
+    REAL(dp) :: brLiq,        gammaAer,  gammaLiq
+    REAL(dp) :: k_HOI_Cl,    k_HOI_Br, k_HOI_HSO3m
+    REAL(dp) :: k_HOI_SO3mm, k_tot,     srMw
+    !
+    k        = 0.0_dp
+    brLiq    = 0.0_dp
+    gammaAer = 0.01_dp
+    gammaLiq = 0.0_dp
+    srMw     = SR_MW(ind_HOI)
+    !
+
+    IF ( H%stratBox ) RETURN
+
+!    IF (  .not. H%stratBox ) THEN
+       !
+       ! HOI + Br- rxn probability in tropospheric liquid cloud.  Assume same rate constants
+       ! for HOI + Br-/Cl- as HOBr + Br-/Cl- because Mossinger & Cox [2001] show that the
+       ! gamma values for the HOI reactions is the same as for the HOBr reactions
+       CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                &
+                        k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
+       !
+       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
+       ! as in aerosol (IBr:ICl = 0.15:0.85)
+       brLiq = 0.15_dp * H%frac_Br_CldC
+       !
+       ! Compute overall HOBr removal rate in cloud
+       k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, brLiq, 0.0_dp )
+       !
+!    ENDIF
+    !
+    ! Now consider HOI uptake by acidic BrSALA in clear-sky
+    IF ( H%SSA_is_Acid ) THEN
+       ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSA) * H%xArea(SSA)
+!       k = 0.15_dp * IuptkBySALA1stOrd( srMw, gamma, H )
+       k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gammaAer )
+       k = kIIR1Ltd( C(ind_HOI), C(ind_BrSALC), k ) ! HOI is limiting, so update k
+    ENDIF
+
+  END FUNCTION HOIUptkByBrSALC
+
+  FUNCTION HOIUptkBySALACl( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOI + SALACl reaction.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: ssarea,       branch,    branch_0
+    REAL(dp) :: brLiq,        gammaAer,  gammaLiq
+    REAL(dp) :: k_HOI_Cl,    k_HOI_Br, k_HOI_HSO3m
+    REAL(dp) :: k_HOI_SO3mm, k_tot,     srMw
+    !
+    k        = 0.0_dp
+    brLiq    = 0.0_dp
+    gammaAer = 0.01_dp
+    gammaLiq = 0.0_dp
+    srMw     = SR_MW(ind_HOI)
+    !
+
+    IF ( H%stratBox ) RETURN
+
+!    IF (  .not. H%stratBox ) THEN
+       !
+       ! HOI + Cl- rxn probability in tropospheric liquid cloud. Assume same rate constants
+       ! for HOI + Br-/Cl- as HOBr + Br-/Cl- because Mossinger & Cox [2001] show that the
+       ! gamma values for the HOI reactions is the same as for the HOBr reactions
+       CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,    &
+            k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
+       !
+       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
+       ! as in aerosol (IBr:ICl = 0.15:0.85)
+       brLiq = 0.85_dp * H%frac_Cl_CldA
+       !
+       ! Compute overall HOI removal rate in cloud
+       k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, brLiq, 0.0_dp )
+       !
+!    ENDIF
+    !
+    ! Now consider HOI uptake by acidic SALACl in clear-sky
+    IF ( H%SSA_is_Acid ) THEN
+       ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSA) * H%xArea(SSA)
+!       k = 0.15_dp * IuptkBySALA1stOrd( srMw, gamma, H )
+       k = 0.85_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gammaAer )
+       k = kIIR1Ltd( C(ind_HOI), C(ind_SALACl), k ) ! HOI is limiting, so update k
+    ENDIF
+
+  END FUNCTION HOIUptkBySALACl
+
+  FUNCTION HOIUptkBySALCCl( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOI + BrSALA reaction.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: ssarea,       branch,    branch_0
+    REAL(dp) :: brLiq,        gammaAer,  gammaLiq
+    REAL(dp) :: k_HOI_Cl,    k_HOI_Br, k_HOI_HSO3m
+    REAL(dp) :: k_HOI_SO3mm, k_tot,     srMw
+    !
+    k        = 0.0_dp
+    brLiq    = 0.0_dp
+    gammaAer = 0.01_dp
+    gammaLiq = 0.0_dp
+    srMw     = SR_MW(ind_HOI)
+    !
+
+    IF ( H%stratBox ) RETURN
+
+!    IF (  .not. H%stratBox ) THEN
+       !
+       ! HOI + Cl- rxn probability in tropospheric liquid cloud.  Assume same rate constants
+       ! for HOI + Br-/Cl- as HOBr + Br-/Cl- because Mossinger & Cox [2001] show that the
+       ! gamma values for the HOI reactions is the same as for the HOBr reactions
+       CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                 &
+                        k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
+       !
+       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
+       ! as in aerosol (IBr:ICl = 0.15:0.85)
+       brLiq = 0.85_dp * H%frac_Cl_CldC
+       !
+       ! Compute overall HOBr removal rate in cloud
+       k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, brLiq, 0.0_dp )
+       !
+!    ENDIF
+    !
+    ! Now consider HOI uptake by acidic BrSALA in clear-sky
+    IF ( H%SSA_is_Acid ) THEN
+       ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSA) * H%xArea(SSA)
+!       k = 0.15_dp * IuptkBySALA1stOrd( srMw, gamma, H )
+       k = 0.85_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gammaAer )
+       k = kIIR1Ltd( C(ind_HOI), C(ind_SALCCl), k ) ! HOI is limiting, so update k
+    ENDIF
+
+  END FUNCTION HOIUptkBySALCCl
+
   FUNCTION IONO2uptkByH2O( H ) RESULT( k )
     !
     ! Computes the reaction rate [1/s] for IONO2 + H2O = HOI + HNO3
@@ -2576,6 +2768,277 @@ CONTAINS
     k = kIIR1Ltd( C(ind_IONO2), C(ind_H2O), k )
   END FUNCTION IONO2uptkByH2O
 
+  SUBROUTINE Gam_HOI_Cld( H,         gamma,     k_tot,                 &
+                          k_HOI_Cl, k_HOI_Br, k_HOI_HSO3, k_HOI_HSO3_2 )
+    !
+    ! Returns uptake probability for HOI in clouds.
+    !
+    TYPE(HetState), INTENT(IN)  :: H        ! Hetchem species metadata
+    REAL(dp),       INTENT(OUT) :: gamma
+    REAL(dp),       INTENT(OUT) :: k_tot
+    REAL(dp),       INTENT(OUT) :: k_HOI_Cl
+    REAL(dp),       INTENT(OUT) :: k_HOI_Br
+    REAL(dp),       INTENT(OUT) :: k_HOI_HSO3
+    REAL(dp),       INTENT(OUT) :: k_HOI_HSO3_2
+    !
+    REAL(dp) :: gd,   M_X,  cavg,  H_X,   gb_tot
+    REAL(dp) :: ybr2, l_r,  C_Hp1, C_Hp2, Br_over_Cl
+    !
+    REAL(dp), PARAMETER :: INV_AB = 1.0_dp / 0.6_dp ! Inv. mass accum coef
+    REAL(dp), PARAMETER :: D_l    = 1.4e-5_dp       ! Amman et al, ACP, 2013
+    !
+    ! Henry's law
+    H_X    = ( HENRY_K0(ind_HOI) * CON_ATM_BAR )                            &
+           * EXP( HENRY_CR(ind_HOI) * ( 1.0_dp/TEMP - INV_T298 ) )
+    !
+    ! Thermal velocity [cm/s]
+    M_X    = MW(ind_HOI) * 1.0e-3_dp
+    cavg   = SQRT( EIGHT_RSTARG_T / ( H%PI * M_X ) ) * 100.0_dp
+    !
+    ! Follow Roberts et al, (2014)
+    C_Hp1  = MIN( H%H_conc_lCl, 1.0e-6_dp )
+    C_Hp2  = MIN( H%H_conc_lCl, 1.0e-2_dp )
+    C_Hp1  = MAX( C_Hp1,        1.0e-9_dp )
+    C_Hp2  = MAX( C_Hp2,        1.0e-6_dp )
+    !
+    ! Rates for each HOI + {Cl-, Br-, HSO3-, HSO3--} rxn. Use same rate coefficient as for HOBr
+    k_HOI_Cl     = 2.3e+10_dp * H%Cl_conc_Cld * C_Hp1  ! Liu & Margerum, EST, 2001
+    k_HOI_Br     = 1.6e+10_dp * H%Br_conc_Cld * C_Hp2  ! ??
+    k_HOI_HSO3   = 2.6e+7_dp  * H%HSO3_aq ! Liu and Abbatt, GRL, 2020
+    k_HOI_HSO3_2 = 5.0e+9_dp  * H%SO3_aq  ! Troy & Margerum, Inorg. Chem., 1991
+    !
+    ! Total rate
+    k_tot  = k_HOI_Cl + k_HOI_Br + k_HOI_HSO3 + k_HOI_HSO3_2
+    !
+    ! Compue reactive uptake coefficient [unitless], prevent div by zero
+    ! l_r is diffusive length scale [cm];
+    ! gb is Bulk reaction coefficient [unitless]
+    gamma  = 0.0_dp
+    IF ( k_tot > 0.0_dp ) THEN
+       l_r    = SQRT( D_l / k_tot )
+       gb_tot = FOUR_R_T * H_X * l_r * k_tot / cavg
+       gb_tot = gb_tot * ReactoDiff_Corr( H%rLiq, l_r )
+       gamma  = 1.0_dp / ( INV_AB + 1.0 / gb_tot )
+    ENDIF
+  END SUBROUTINE Gam_HOI_Cld
+
+  SUBROUTINE Gam_HOI_Ice( H, gamma, branch_HCl, branch_HBr )
+    !
+    ! Calculates total reactive uptake coefficient for
+    ! HOI + HCl and HOI + HBr in ice clouds.
+    !
+    TYPE(HetState), INTENT(IN)  :: H              ! Hetchem State
+    REAL(dp),       INTENT(OUT) :: gamma          ! Total rxn prob [1]
+    REAL(dp),       INTENT(OUT) :: branch_HCl     ! HCl branch ratio
+    REAL(dp),       INTENT(OUT) :: branch_HBr     ! HBr branch ratio
+    !
+    REAL(dp) :: gamma_HCl, gamma_HBr              ! local vars
+    !
+    ! Overall uptake prob. of  HOI+HCl and HOI+HBr together
+    gamma_HCl = H%HCl_theta * 0.25_dp
+    gamma_HBr = H%HBr_theta * 4.8e-4_dp * EXP( 1240.0_dp / TEMP )
+    gamma     = gamma_HCl + gamma_HBr
+    !
+    ! Branching ratios HCl/total and HBr/total
+    branch_HCl = 0.0_dp
+    branch_HBr = 0.0_dp
+    IF ( gamma > 0.0_dp ) THEN
+       branch_HCl = gamma_HCl / gamma
+       branch_HBr = gamma_HBr / gamma
+    ENDIF
+  END SUBROUTINE Gam_HOI_Ice
+
+  FUNCTION HOIUptkByHBr( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOBr + HBr reaction
+    ! in the stratosphere and in tropospheric clouds.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: branch,       branch_0,     brIce
+    REAL(dp) :: brLiq,        dummy,        gammaLiq
+    REAL(dp) :: gammaIce,     k_HOI_Cl,    k_HOI_Br
+    REAL(dp) :: k_HOI_HSO3m, k_HOI_SO3mm, k_tot
+    REAL(dp) :: srMw
+    !
+    k        = 0.0_dp
+    brIce    = 0.0_dp
+    brLiq    = 0.0_dp
+    gammaIce = 0.0_dp
+    gammaLiq = 0.0_dp
+    srMw     = SR_MW(ind_HOI)
+    !
+!    IF ( H%stratBox ) THEN
+!       !
+!       ! Uptake on tropospheric (origin) sulfate in stratosphere
+!       gammaLiq = 0.25_dp
+!       k = k + Ars_L1k( H%xArea(SUL), H%xRadi(SUL), gammaLiq, srMw )
+!       !
+!       ! Uptake on strat sulfate liquid aerosol
+!       k = k + H%xArea(SLA) * H%KHETI_SLA(HOBr_plus_HBr)
+!       !
+!       ! Uptake on irregular ice cloud
+!       gammaIce = 0.3_dp
+!       IF ( H%natSurface ) gammaIce = 0.001_dp
+!       k = k + Ars_L1k( H%xArea(IIC), H%xRadi(IIC), gammaIce, srMw )
+!       !
+!    ELSE
+
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! HOI + HBr rxn probability in tropospheric liquid cloud
+       CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                 &
+                        k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm  )
+       !
+       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
+       ! as in aerosol (IBr:ICl = 0.15:0.85)
+       brLiq = 0.15_dp * H%frac_Br_CldG
+       !
+       ! Overall probability of HOI uptake and
+       ! ice-path branching ratio for HOI + HBr
+ !      CALL Gam_HOI_Ice( H, gammaIce, dummy, brIce )
+       !
+       ! Compute overall HOI removal rate in cloud
+       k = k + CloudHet( H, srMw, gammaLiq, gammaIce, brLiq, brIce )
+       !
+    ENDIF
+
+    ! Assume HOI is limiting, so update the removal rate accordingly
+    k = kIIR1Ltd( C(ind_HOI), C(ind_HBr), k )
+  END FUNCTION HOIUptkByHBr
+
+  FUNCTION HOIUptkByHCl( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOI + HCl reaction
+    ! which only occurs in the stratosphere.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: branch,       branch_0,     brIce
+    REAL(dp) :: brLiq,        dummy,        gammaLiq
+    REAL(dp) :: gammaIce,     k_HOI_Cl,    k_HOI_Br
+    REAL(dp) :: k_HOI_HSO3m, k_HOI_SO3mm, k_tot
+    REAL(dp) :: srMw
+    !
+    k        = 0.0_dp
+    brIce    = 0.0_dp
+    brLiq    = 0.0_dp
+    gammaIce = 0.0_dp
+    gammaLiq = 0.0_dp
+    srMw     = SR_MW(ind_HOI)
+    !
+!    IF ( H%stratBox ) THEN
+!       !
+!       ! Uptake on tropospheric (origin) sulfate in stratosphere
+!       gammaLiq = 0.2_dp
+!       k = k + Ars_L1k( H%xArea(SUL), H%xRadi(SUL), gammaLiq, srMw )
+!       !
+!       ! Uptake on strat sulfate liquid aerosol
+!       k = k + H%xArea(SLA) * H%KHETI_SLA(HOBr_plus_HCl)
+!       !
+!       ! Uptake on irregular ice cloud
+!       gammaIce = 0.3_dp
+!       IF ( H%natSurface ) gammaIce = 0.1_dp
+!       k = k + Ars_L1k( H%xArea(IIC), H%xRadi(IIC), gammaIce, srMw )
+!       !
+!    ELSE
+
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! HOI + HCl rxn probability in tropospheric liquid cloud
+       CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                  &
+                        k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm   )
+       !
+       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
+       ! as in aerosol (IBr:ICl = 0.15:0.85)
+       brLiq = 0.85_dp * H%frac_Cl_CldG
+       !
+       ! Overall probability of HOBr uptake and
+       ! ice-path branching ratio for HOBr + HCl
+!       CALL Gam_HOI_Ice( H, gammaIce, brIce, dummy )
+       !
+       ! Compute overall HOBr removal rate in cloud
+       k = k + CloudHet( H, srMw, gammaLiq, gammaIce, brLiq, brIce )
+       !
+    ENDIF
+
+    ! Assume HOI is limiting, so update the removal rate accordingly
+    k = kIIR1Ltd( C(ind_HOI), C(ind_HCl), k )
+  END FUNCTION HOIUptkByHCl
+
+  FUNCTION HOIUptkByHSO3m( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOI + HSO3(-) reaction.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: iLiq,     gammaLiq,     k_HOI_Cl
+    REAL(dp) :: k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm
+    REAL(dp) :: k_tot,     srMw
+    !
+    k        = 0.0_dp
+    iLiq    = 0.0_dp
+    gammaLiq = 0.0_dp
+    srMw     = SR_MW(ind_HOI)
+    !
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! HOI + HBr rxn probability in tropospheric liquid cloud
+       CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                 &
+                        k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
+       !
+       ! Branching ratio for liquid path of HOI + HSO3- in cloud
+       iLiq = k_HOI_HSO3m / k_tot
+       !
+       ! Compute overall HOI removal rate in cloud
+       k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, iLiq, 0.0_dp )
+       !
+    ENDIF
+
+    ! Assume HOI is limiting, so update the removal rate accordingly
+    ! Convert SO2 to HSO3- with the HSO3-/SO2 ratio
+    k = kIIR1Ltd( C(ind_HOI), C(ind_SO2), k ) 
+  END FUNCTION HOIUptkByHSO3m
+
+  FUNCTION HOIUptkBySO3mm( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOBr + HSO3(-) reaction.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: iLiq,     gammaLiq,     k_HOI_Cl
+    REAL(dp) :: k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm
+    REAL(dp) :: k_tot,     srMw
+    !
+    k    = 0.0_dp
+    iLiq    = 0.0_dp
+    gammaLiq = 0.0_dp
+    srMw = SR_MW(ind_HOI)
+    !
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! HOI + SO3-- rxn probability in tropospheric liquid cloud
+       CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                 &
+                        k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
+       !
+       ! Branching ratio for liquid path of HOI + SO3-- in cloud
+       iLiq = k_HOI_SO3mm / k_tot
+       !
+       ! Compute overall HOBr removal rate in cloud
+       k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, iLiq, 0.0_dp )
+       !
+    ENDIF
+
+    ! Assume HOI is limiting, so update the removal rate accordingly
+    ! Convert SO2 to SO3-- with the SO3--/SO2 ratio
+    k = kIIR1Ltd( C(ind_HOI), C(ind_SO2), k ) 
+
+  END FUNCTION HOIUptkBySO3mm
+
   !=========================================================================
   ! Hetchem rate-law functions for N2O5
   !=========================================================================
diff --git a/KPP/fullchem/fullchem_SulfurChemFuncs.F90 b/KPP/fullchem/fullchem_SulfurChemFuncs.F90
index ebd2a62fd..4bc81e58f 100644
--- a/KPP/fullchem/fullchem_SulfurChemFuncs.F90
+++ b/KPP/fullchem/fullchem_SulfurChemFuncs.F90
@@ -418,6 +418,7 @@ CONTAINS
 !
     USE fullchem_RateLawFuncs, ONLY : HOBrUptkByHSO3m, HOBrUptkBySO3mm
     USE fullchem_RateLawFuncs, ONLY : HOClUptkByHSO3m, HOClUptkBySO3mm
+    USE fullchem_RateLawFuncs, ONLY : HOIUptkByHSO3m,  HOIUptkBySO3mm
     USE gckpp_Global
     USE gckpp_Parameters
     USE gckpp_Precision
@@ -477,8 +478,8 @@ CONTAINS
     REAL(dp)              :: CVF,        R1,        R2
     REAL(dp)              :: XX,         FC,        LST
     REAL(dp)              :: XX1,        XX2,       XX3
-    REAL(dp)              :: XX4,        XX5,       GNH3
-    REAL(dp)              :: SR,         DENOM
+    REAL(dp)              :: XX4,        XX5,       XX6
+    REAL(dp)              :: GNH3,       SR,        DENOM
 
     ! Pointers
     REAL(fp), POINTER     :: AD(:,:,:)
@@ -515,6 +516,7 @@ CONTAINS
     SR     =  0.0_dp
     SRHOBr =  0.0_dp
     SRHOCl =  0.0_dp
+    SRHOI  =  0.0_dp
     SRO3   =  0.0_dp
     W      =  0.0_dp
     XX     =  0.0_dp  ! All XX* in units of [v/v/timestep]
@@ -523,6 +525,7 @@ CONTAINS
     XX3    =  0.0_dp
     XX4    =  0.0_dp
     XX5    =  0.0_dp
+    XX6    =  0.0_dp
 
     ! FC is guaranteed to be > 1e-4, because HET_DROP_CHEM
     ! is not called otherwise (bmy, 07 Oct 2021)
@@ -622,8 +625,31 @@ CONTAINS
        XX5 = XX5 + WhenExpCantBeDone( R1, R2, K, DTCHEM )
     ENDIF
 
+    ! HSO3- + HOI
+    R1  = C(ind_SO2) * CVF * State_Chm%HSO3_aq(I,J,L)
+    R2  = C(ind_HOI)  * CVF
+    K   = HOIUptkByHSO3m(State_Het) / CVF
+    Arg = ( R1 - R2 ) * ( K * DTCHEM )
+    IF ( IsSafeExp( Arg ) .and. ABS( Arg ) > 0.0_dp ) THEN
+       XX  = EXP( Arg )
+       XX6 = ( R1 * R2 ) * ( XX - 1.0_fp ) / ( ( R1 * XX ) - R2 )
+    ELSE
+       XX6 = WhenExpCantBeDone( R1, R2, K, DTCHEM )
+    ENDIF
+
+    ! SO3-- + HOI (add to HSO3- + HOI rate)
+    R1  = C(ind_SO2) * CVF * State_Chm%SO3_aq(I,J,L)
+    K   = HOIUptkBySO3mm(State_Het) / CVF
+    Arg = ( R1 - R2 ) * ( K * DTCHEM )
+    IF ( IsSafeExp( Arg ) .and. ABS( Arg ) > 0.0_dp ) THEN
+       XX  = EXP( Arg )
+       XX6 = XX6 + ( ( R1 * R2 ) * ( XX - 1.0_dp ) / ( ( R1 * XX ) - R2 ) )
+    ELSE
+       XX6 = XX6 + WhenExpCantBeDone( R1, R2, K, DTCHEM )
+    ENDIF
+
     ! Sum of all rates
-    LST = XX1 + XX2 + XX3 + XX4 + XX5
+    LST = XX1 + XX2 + XX3 + XX4 + XX5 + XX6
 
     !### Debug print
     !IF (I .eq. 12 .and. J .eq. 7 .and. L .eq. 1) THEN
@@ -636,7 +662,8 @@ CONTAINS
        XX3 = ( R1 * XX3 ) / LST
        XX4 = ( R1 * XX4 ) / LST
        XX5 = ( R1 * XX5 ) / LST
-       LST = XX1 + XX2 + XX3 + XX4 + XX5
+       XX6 = ( R1 * XX6 ) / LST
+       LST = XX1 + XX2 + XX3 + XX4 + XX5 + XX6
      ENDIF
 
     ! Convert gas phase concentrations from [v/v] to [pptv]
@@ -772,12 +799,14 @@ CONTAINS
     SRO3   = SR * SafeDiv( XX2, DENOM, 0.0_fp )
     SRHOCl = SR * SafeDiv( XX4, DENOM, 0.0_fp )
     SRHOBr = SR * SafeDiv( XX5, DENOM, 0.0_fp )
+    SRHOI  = SR * SafeDiv( XX6, DENOM, 0.0_fp )
     
     ! Convert this rate to a second order rate constant for use in KPP
     ! Make sure division can be done safely
     SRO3   = SafeDiv( SRO3,   ( C(ind_SO2) * C(ind_O3  ) ), 0.0_dp )
     SRHOCl = SafeDiv( SRHOCl, ( C(ind_SO2) * C(ind_HOCl) ), 0.0_dp )
     SRHOBr = SafeDiv( SRHOBr, ( C(ind_SO2) * C(ind_HOBr) ), 0.0_dp )
+    SRHOI  = SafeDiv( SRHOI,  ( C(ind_SO2) * C(ind_HOI ) ), 0.0_dp )
  
     ! Free pointers
     AD     => NULL()
@@ -974,6 +1003,8 @@ CONTAINS
     REAL(fp)              :: fupdateHOCl_0  !XW
     REAL(fp)              :: HCHOCl, KHOCl, f_srhocl, HOCl0 !XW
 
+
+
     REAL(fp)              :: KaqHCHO, KaqHMS, KaqHMS2, HMSc ! JMM, MSL
 
     ! Pointers
-- 
2.30.2


From 736ad024d8dfb2c9d6c663539214ab0091d34318 Mon Sep 17 00:00:00 2001
From: Becky Alexander <beckya@atmos.washington.edu>
Date: Fri, 5 Jul 2024 15:06:43 -0700
Subject: [PATCH 3/8] Add HOCl + Br- = BrCl in trop clouds and aerosol

---
 KPP/fullchem/fullchem.eqn              |   2 +
 KPP/fullchem/fullchem_RateLawFuncs.F90 | 306 ++++++++++++++++++++-----
 2 files changed, 256 insertions(+), 52 deletions(-)

diff --git a/KPP/fullchem/fullchem.eqn b/KPP/fullchem/fullchem.eqn
index 5b28e1020..28e005613 100644
--- a/KPP/fullchem/fullchem.eqn
+++ b/KPP/fullchem/fullchem.eqn
@@ -1450,6 +1450,8 @@ HOCl + HCl = Cl2 + H2O :       HOClUptkByHCl( State_Het );
 HOCl + HBr = BrCl + H2O :      HOClUptkByHBr( State_Het );                                                  {2014/02/03; Eastham2014; SDE}
 HOCl + SALACL = Cl2 + H2O :    HOClUptkBySALACL( State_Het );                                               {2018/01/22; XW}
 HOCl + SALCCL = Cl2 + H2O :    HOClUptkBySALCCL( State_Het );                                               {2018/01/22; XW}
+HOCl + BrSALA = BrCl + H2O :   HOClUptkByBrSALA( State_Het );                                               {2024/07/05; BALEXANDER}
+HOCl + BrSALC = BrCl + H2O :   HOClUptkByBrSALC( State_Het );                                               {2024/07/05; BALEXANDER}
 HOCl + SO2 = SO4 + HCl :       HOClUptkByHSO3m( State_Het ) + HOClUptkBySO3mm( State_Het ) + SRHOCl;        {2023/01/30; Add SRHOCL, BA; 2018/11/08; XW; June 6, 2021, MSL}
 HOBr + HBr = Br2 + H2O :       HOBrUptkByHBr( State_Het );                                                  {2017/09/22; Sherwen2016b;TS,JAS,SDE}
 HOBr + HCl = BrCl + H2O :      HOBrUptkByHCl( State_Het );                                                  {2017/09/22; Sherwen2016b;TS,JAS,SDE}
diff --git a/KPP/fullchem/fullchem_RateLawFuncs.F90 b/KPP/fullchem/fullchem_RateLawFuncs.F90
index da3e0dc02..d843070b2 100644
--- a/KPP/fullchem/fullchem_RateLawFuncs.F90
+++ b/KPP/fullchem/fullchem_RateLawFuncs.F90
@@ -2069,32 +2069,54 @@ CONTAINS
   ! Hetchem rate-law functions for HOCl
   !=========================================================================
 
-  SUBROUTINE Gam_HOCl_Cld( H, gamma, branchCl, branchSO3 )
-    !
+!  SUBROUTINE Gam_HOCl_Cld( H, gamma, branchCl, branchSO3 )
+  SUBROUTINE Gam_HOCl_Cld( H, gamma, k_tot,              &
+                           k_HOCl_Cl, k_HOCl_Br,         &
+                           k_HOCl_HSO3, k_HOCl_HSO3_2      )    
+
     ! Computes the uptake coefficient [1] of HOCl + HSO3 and HOCl + SO3.
     ! Returns reaction rates of Cl and SO3 paths to compute branching ratios.
     !
     TYPE(HetState), INTENT(IN)  :: H             ! Hetchem State
     REAL(dp),       INTENT(OUT) :: gamma         ! Rxn prob [1]
-    REAL(dp),       INTENT(OUT) :: branchCl      ! Branch ratio, Cl path [1]
-    REAL(dp),       INTENT(OUT) :: branchSO3     ! Branch ratio, SO3 path [1]
+!    REAL(dp),       INTENT(OUT) :: branchCl      ! Branch ratio, Cl path [1]
+!    REAL(dp),       INTENT(OUT) :: branchSO3     ! Branch ratio, SO3 path [1]
+    REAL(dp),       INTENT(OUT) :: k_tot
+    REAL(dp),       INTENT(OUT) :: k_HOCl_Cl
+    REAL(dp),       INTENT(OUT) :: k_HOCl_Br
+    REAL(dp),       INTENT(OUT) :: k_HOCl_HSO3
+    REAL(dp),       INTENT(OUT) :: k_HOCl_HSO3_2
     !
     REAL(dp), PARAMETER :: INV_AB = 1.0_dp / 0.8_dp  ! 1/mass accom coeff
     REAL(dp), PARAMETER :: D_l    = 2.0e-5_dp        ! Liq diff phase coeff
     !
-    REAL(dp) :: cavg,  gb_tot, H_X, k_Cl
-    REAL(dp) :: k_SO3, k_tot,  l_r, M_X
+!    REAL(dp) :: cavg,  gb_tot, H_X, k_Cl
+!    REAL(dp) :: k_SO3, k_tot,  l_r, M_X
+    REAL(dp) :: gd,   M_X,  cavg,  H_X,   gb_tot
+    REAL(dp) :: ybr2, l_r,  C_Hp1, C_Hp2, Br_over_Cl
+
+   ! Follow Roberts et al, (2014) assuming that it also applies to HOCl + X-
+    C_Hp1  = MIN( H%H_conc_lCl, 1.0e-6_dp )
+    C_Hp2  = MIN( H%H_conc_lCl, 1.0e-2_dp )
+    C_Hp1  = MAX( C_Hp1,        1.0e-9_dp )
+    C_Hp2  = MAX( C_Hp2,        1.0e-6_dp )
     !
     ! Reaction rates, Cl and SO3 paths [1/s]
-    k_Cl      = 1.5e+4_dp * H%H_Conc_LCL  * H%Cl_conc_Cld
-    k_SO3     = 2.8e+5_dp * H%TSO3_aq
-    k_tot     = k_Cl + k_SO3
+!    k_Cl      = 1.5e+4_dp * H%H_Conc_LCL  * H%Cl_conc_Cld
+    k_HOCl_Cl     = 1.5e+4_dp * H%Cl_conc_Cld * C_Hp1
+    k_HOCl_Br     = 1.32e+6_dp * H%Br_conc_Cld * C_Hp2 ![Kumar and Margerum, 1987]
+!    k_SO3     = 2.8e+5_dp * H%TSO3_aq
+    k_HOCl_HSO3   = 2.8e+5_dp * H%HSO3_aq ! [Liu and Abbatt, 2020]
+    k_HOCl_HSO3_2 = 7.6e+8_dp * H%SO3_aq ! [Fogelman et al., 1989]
+!    k_tot     = k_Cl + k_SO3
+    k_tot = k_HOCl_Cl + k_HOCl_Br + k_HOCl_HSO3 + k_HOCl_HSO3_2
+
     !
     ! Compute reactive uptake coefficient [1] and branching ratio [1], Cl path
     ! but avoid division by zero
     gamma     = 0.0_dp
-    branchCl  = 0.0_dp
-    branchSO3 = 0.0_dp
+!    branchCl  = 0.0_dp
+!    branchSO3 = 0.0_dp
     !
     IF ( k_tot > 0.0_dp ) THEN
        !
@@ -2111,12 +2133,13 @@ CONTAINS
        gb_tot    = gb_tot * ReactoDiff_Corr( H%rLiq, l_r )
        !
        gamma     = 1.0_dp / ( INV_AB + 1.0_dp / gb_tot )
-       branchCl  = k_Cl   / k_tot
-       branchSO3 = k_SO3  / k_tot
+!       branchCl  = k_Cl   / k_tot
+!       branchSO3 = k_SO3  / k_tot
     ENDIF
   END SUBROUTINE Gam_HOCl_Cld
 
-  SUBROUTINE Gam_HOCl_AER( H, radius, C_Hp, C_Cl, gamma )
+!  SUBROUTINE Gam_HOCl_AER( H, radius, C_Hp, C_Cl, gamma )
+  SUBROUTINE Gam_HOCl_AER( H, radius, C_Hp, C_Cl, C_Br, gamma )
     !
     ! Calculates reactive uptake coefficients [1] for the reactions
     ! HOCl + SALACL and HOCl + SALCCL.
@@ -2125,13 +2148,17 @@ CONTAINS
     REAL(dp),       INTENT(IN)  :: radius        ! Radius [cm]
     REAL(dp),       INTENT(IN)  :: C_Hp          ! H+ conc [mol/L]
     REAL(dp),       INTENT(IN)  :: C_Cl          ! Cl- conc [mol/L]
+    REAL(dp),       INTENT(IN)  :: C_Br          ! Br- conc [mol/L]
     REAL(dp),       INTENT(OUT) :: gamma
     !
     REAL(dp), PARAMETER :: INV_AB = 1.0_dp / 0.8_dp ! 1/mass accum coeff
     REAL(dp), PARAMETER :: D_l    = 2.0e-5_dp       ! Liq phase diffusion coeff
-    REAL(dp), PARAMETER :: K_TER  = 1.5e+4_dp       ! Units: M-1 s-1
+!    REAL(dp), PARAMETER :: K_TER  = 1.5e+4_dp       ! Units: M-1 s-1
     !
     REAL(dp) :: cavg, gb, H_X, l_r, M_X
+    REAL(dp) :: C_Hp1,     C_Hp2
+    REAL(dp) :: k_tot, k_HOCl_Cl, k_HOCl_Br, gb_tot
+
     !
     gamma = 0.0_dp
     !
@@ -2145,12 +2172,30 @@ CONTAINS
     ! Henry's law
     H_X   = ( HENRY_K0(ind_HOCl) * CON_ATM_BAR )                             &
           * EXP( HENRY_CR(ind_HOCl) * ( INV_TEMP - INV_T298 ) )
-    l_r   = SQRT( D_l / ( K_TER * C_Hp * C_Cl ) )
-    gb    = FOUR_R_T * H_X * l_r * K_TER * C_Hp * C_Cl / cavg
-    gb    = gb * ReactoDiff_Corr( radius, l_r )
+
+    ! Follow Roberts et al, (2014) assuming same pH-dependence for HOCl as HOBr
+    C_Hp1     = MAX( MIN( C_Hp, 1.0e-6_dp ), 1.0e-9_dp )
+    C_Hp2     = MAX( MIN( C_Hp, 1.0e-2_dp ), 1.0e-6_dp )
+    !
+    ! Rates for each HOBr + {Cl-, Br-} rxn
+    k_HOCl_Cl = 2.8e+4_dp  * C_Cl     * C_Hp1  ! [Nagy et al., 1988]
+    k_HOCl_Br = 1.32e+6_dp * C_Br     * C_Hp2  ! [Kumar and Margerum, 1987]   
+    k_tot     = k_HOCl_Cl  + k_HOCl_Br
+
+    ! l_r is diffusive length scale [cm];
+    ! gb is Bulk reaction coefficient [unitless]
+    IF ( k_tot > 0.0_dp ) THEN
+!    l_r   = SQRT( D_l / ( K_TER * C_Hp * C_Cl ) )
+       l_r    = SQRT( D_l / k_tot )
+!    gb    = FOUR_R_T * H_X * l_r * K_TER * C_Hp * C_Cl / cavg
+!    gb    = gb * ReactoDiff_Corr( radius, l_r )
+       gb_tot = FOUR_R_T * H_X * l_r * k_tot / cavg
+       gb_tot = gb_tot * ReactoDiff_Corr( radius, l_r )
+       gamma  = 1.0_dp / ( INV_AB + 1.0 / gb_tot )
+    ENDIF
     !
     ! Reactive uptake coefficient [1]
-    gamma = 1.0_dp / ( INV_AB  +  1.0_dp / gb )
+!    gamma = 1.0_dp / ( INV_AB  +  1.0_dp / gb )
   END SUBROUTINE Gam_HOCl_Aer
 
   FUNCTION HOClUptkByHCl( H ) RESULT( k )
@@ -2161,7 +2206,10 @@ CONTAINS
     REAL(dp)                   :: k              ! rxn rate [1/s]
     !
     REAL(dp) :: branch, branchCl, brIce, dummy
-    REAL(dp) :: gamma,  gammaIce, srMw
+    REAL(dp) :: gamma,  gammaIce, srMw, k_tot
+    REAL(dp) :: k_HOCl_Cl, k_HOCl_Br
+    REAL(dp) :: k_HOCl_HSO3, k_HOCl_HSO3_2
+
     !
     k    = 0.0_dp
     srMw = SR_MW(ind_HOCl)
@@ -2180,23 +2228,24 @@ CONTAINS
        IF ( H%natSurface ) gamma = 0.1_dp      ! Rxn prob, NAT
        k = k + Ars_L1K( H%xArea(IIC), H%xRadi(IIC), gamma, srMw )
 
-       ! Assume HOCl is limiting, so recompute reaction rate accordingly
-       k = kIIR1Ltd( C(ind_HOCl), C(ind_HCl), k )
-       !
-       RETURN
-    ENDIF
-    !
+   ELSE
+
     ! HOCl + HCl uptake coeff [1] & branch ratio [1] in trop liquid cloud
-    CALL Gam_HOCl_Cld( H, gamma, branchCl, dummy )
-    branch = branchCl * H%frac_Cl_CldG
+!    CALL Gam_HOCl_Cld( H, gamma, branchCl, dummy )
+!    branch = branchCl * H%frac_Cl_CldG
+       CALL Gam_HOCl_Cld( H, gamma, k_tot,            &
+                          k_HOCl_Cl, k_HOCl_Br,       &
+                          k_HOCl_HSO3, k_HOCl_HSO3_2   )
+       branch = ( k_HOCl_Cl / k_tot ) * H%frac_Cl_CldG
+
     !
     ! HOCl + HCl uptake coeff [1] & branch ratio [1] in trop ice cloud
-    gammaIce = 0.22_dp * H%HCl_theta
-    brIce    = 1.0_dp
-    !
-    ! Compute overall HOCl + HCl uptake rate accounting for cloud fraction
-    k = k + CloudHet( H, srMw, gamma, gammaIce, branch, brIce )
-    !
+       gammaIce = 0.22_dp * H%HCl_theta
+       brIce    = 1.0_dp
+       k = k + CloudHet( H, srMw, gamma, gammaIce, branch, brIce )
+
+    ENDIF
+
     ! Assume HOCl is limiting, so recompute reaction rate accordingly
     k = kIIR1Ltd( C(ind_HOCl), C(ind_HCl), k )
   END FUNCTION HOClUptkByHCl
@@ -2208,7 +2257,10 @@ CONTAINS
     TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
     REAL(dp)                   :: k              ! rxn rate [1/s]
     !
-    REAL(dp) :: gamma, srMw
+    REAL(dp) :: gamma, srMw, k_tot
+    REAL(dp) :: branch, gammaIce, brIce
+    REAL(dp) :: k_HOCl_Cl, k_HOCl_Br
+    REAL(dp) :: k_HOCl_HSO3, k_HOCl_HSO3_2
     !
     k    = 0.0_dp
     srMw = SR_MW(ind_HOCl)
@@ -2225,6 +2277,21 @@ CONTAINS
        ! HOCl + HBr on irregular ice cloud (ice and NAT surface)
        gamma = 0.3_dp
        k = k + Ars_L1K( H%xArea(IIC), H%xRadi(IIC), gamma, srMw )
+    ELSE
+       ! HOCl + HBr uptake coeff [1] & branch ratio [1] in trop liquid cloud
+       CALL Gam_HOCl_Cld( H, gamma, k_tot,              &
+                          k_HOCl_Cl, k_HOCl_Br,         &
+                          k_HOCl_HSO3, k_HOCl_HSO3_2     )
+        branch = ( k_HOCl_Br / k_tot ) * H%frac_Br_CldG
+       !
+       ! HOCl + HCl uptake coeff [1] & branch ratio [1] in trop ice cloud
+       ! Assume same uptake coeff for HBr
+       gammaIce = 0.22_dp * H%HCl_theta
+       brIce    = 1.0_dp
+       !
+       ! Compute overall HOCl + HCl uptake rate accounting for cloud fraction
+       k = k + CloudHet( H, srMw, gamma, gammaIce, branch, brIce )
+
     ENDIF
     !
     ! Assume HOCl is limiting, so recompute reaction rate accordingly
@@ -2243,7 +2310,10 @@ CONTAINS
     REAL(dp)                   :: k              ! rxn rate [1/s]
     !
     REAL(dp) :: area,  branch, branchCl
-    REAL(dp) :: dummy, gamma,  srMw
+    REAL(dp) :: dummy, gamma,  srMw, k_tot
+    REAL(dp) :: k_HOCl_Cl, k_HOCl_Br
+    REAL(dp) :: k_HOCl_HSO3, k_HOCl_HSO3_2
+
     !
     k    = 0.0_dp
     srMw = SR_MW(ind_HOCl)
@@ -2252,8 +2322,13 @@ CONTAINS
     IF ( .not. H%stratBox ) THEN
        !
        ! HOCl + SALACL uptake coeff [1] & branch ratio [1], liquid path
-       CALL Gam_HOCl_Cld( H, gamma, branchCl, dummy )
-       branch = branchCl * H%frac_Cl_CldA
+!       CALL Gam_HOCl_Cld( H, gamma, branchCl, dummy )
+!       branch = branchCl * H%frac_Cl_CldA
+       CALL Gam_HOCl_Cld( H, gamma, k_tot,                &
+                          k_HOCl_Cl, k_HOCl_Br,           &
+                          k_HOCl_HSO3, k_HOCl_HSO3_2       )
+       branch = ( k_HOCl_Cl / k_tot ) * H%frac_Cl_CldA
+
        !
        ! HOCl + HCl uptake rate [1/s] accounting for cloud fraction
        k = k + CloudHet( H, srMw, gamma, 0.0_dp, branch, 0.0_dp )
@@ -2261,8 +2336,11 @@ CONTAINS
     !
     ! Compute HOCl + SALACL uptake rate [1/s] on acidic aerosols in clear-sky
     IF ( H%SSA_is_Acid ) THEN
-       CALL Gam_HOCl_Aer( H, H%aClRadi, H%H_conc_SSA, H%Cl_conc_SSA, gamma )
-       area = H%ClearFr * H%aClArea * H%f_Acid_SSA
+!       CALL Gam_HOCl_Aer( H, H%aClRadi, H%H_conc_SSA, H%Cl_conc_SSA, gamma )
+       CALL Gam_HOCl_Aer( H, H%aClRadi, H%H_conc_SSA, &
+                          H%Cl_conc_SSA, H%Br_conc_SSA, gamma )
+!       area = H%ClearFr * H%aClArea * H%f_Acid_SSA
+       area = H%ClearFr * H%aClArea * (1.0_dp - H%f_Alk_SSA)
        k    = k + Ars_L1k( area, H%aClRadi, gamma, srMw )
     ENDIF
     !
@@ -2278,7 +2356,9 @@ CONTAINS
     REAL(dp)                   :: k              ! rxn rate [1/s]
     !
     REAL(dp) :: area,  branch, branchCl
-    REAL(dp) :: dummy, gamma,  srMw
+    REAL(dp) :: dummy, gamma,  srMw, k_tot
+    REAL(dp) :: k_HOCl_Cl, k_HOCl_Br
+    REAL(dp) :: k_HOCl_HSO3, k_HOCl_HSO3_2
     !
     k    = 0.0_dp
     srMw = SR_MW(ind_HOCl)
@@ -2287,17 +2367,24 @@ CONTAINS
     IF ( .not. H%stratBox ) THEN
        !
        ! HOCl + SALACL uptake coeff [1] & branch ratio [1], liquid path
-       CALL Gam_HOCl_Cld( H, gamma, branchCl, dummy )
-       branch = branchCl * H%frac_Cl_CldC
-       !
+!       CALL Gam_HOCl_Cld( H, gamma, branchCl, dummy )
+!       branch = branchCl * H%frac_Cl_CldC
+       CALL Gam_HOCl_Cld( H, gamma, k_tot,           &
+                          k_HOCl_Cl, k_HOCl_Br,      &
+                         k_HOCl_HSO3, k_HOCl_HSO3_2   )
+       branch = ( k_HOCl_Cl / k_tot ) * H%frac_Cl_CldC       
+
        ! HOCl + HCl uptake rate [1/s] accounting for cloud fraction
        k = k + CloudHet( H, srMw, gamma, 0.0_dp, branch, 0.0_dp )
     ENDIF
     !
     ! Compute HOCl + SALCCL uptake rate [1/s] on acidic aerosols in clear-sky
     IF ( H%SSC_is_Acid ) THEN
-       CALL Gam_HOCl_Aer( H, H%xRadi(SSC), H%H_conc_SSC, H%Cl_conc_SSC, gamma )
-       area = H%ClearFr * H%xArea(SSC) * H%f_Acid_SSC
+!       CALL Gam_HOCl_Aer( H, H%xRadi(SSC), H%H_conc_SSC, H%Cl_conc_SSC, gamma )
+!       area = H%ClearFr * H%xArea(SSC) * H%f_Acid_SSC
+       CALL Gam_HOCl_Aer( H, H%xRadi(SSC), H%H_conc_SSC, &
+                          H%Cl_conc_SSC, H%Br_conc_SSC, gamma )
+       area = H%ClearFr * H%xArea(SSC) * (1.0_dp - H%f_Alk_SSC)
        k    = k + Ars_L1k( area, H%xRadi(SSC), gamma, srMw )
     ENDIF
     !
@@ -2305,6 +2392,107 @@ CONTAINS
     k = kIIR1Ltd( C(ind_HOCl), C(ind_SALCCL), k )
   END FUNCTION HOClUptkBySALCCL
 
+  FUNCTION HOClUptkByBrSALA( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOCl + BrSALA reaction.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: area,  branch, branchCl
+    REAL(dp) :: dummy, gamma,  srMw, k_tot
+    REAL(dp) :: k_HOCl_Cl, k_HOCl_Br
+    REAL(dp) :: k_HOCl_HSO3, k_HOCl_HSO3_2
+    !
+    k    = 0.0_dp
+    srMw = SR_MW(ind_HOCl)
+    !
+    ! Compute HOCl + SALACL uptake in tropospheric liquid cloud
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! HOCl + SALACL uptake coeff [1] & branch ratio [1], liquid path
+      CALL Gam_HOCl_Cld( H, gamma, k_tot,             &
+                         k_HOCl_Cl, k_HOCl_Br,        &
+                         k_HOCl_HSO3, k_HOCl_HSO3_2    )
+      branch = ( k_HOCl_Br / k_tot ) * H%frac_Br_CldA
+       !
+       ! HOCl + HCl uptake rate [1/s] accounting for cloud fraction
+       k = k + CloudHet( H, srMw, gamma, 0.0_dp, branch, 0.0_dp )
+    ENDIF
+    !
+    ! Compute HOCl + BrSALA uptake rate [1/s] on acidic aerosols in clear-sky
+    IF ( H%SSA_is_Acid ) THEN
+!       CALL Gam_HOCl_Aer( H, H%aClRadi, H%H_conc_SSA, H%Cl_conc_SSA, gamma )
+       CALL Gam_HOCl_Aer( H, H%aClRadi, H%H_conc_SSA, H%Cl_conc_SSA,   &
+                          H%Br_conc_SSA, gamma )
+
+       ! Branching ratio (depends on Br- / Cl- ratio)
+       ! Assume same branching ratio for HOCl as HOBr for now
+       branch = 0.9_dp
+       IF ( H%Br_over_Cl_SSA <= 5.0e-4_dp ) THEN
+          branch = Br2_Yield( H%Br_over_Cl_SSA )
+       ENDIF
+
+!       area = H%ClearFr * H%aClArea
+       area = H%ClearFr * H%aClArea * (1.0_dp - H%f_Alk_SSA)
+       k    = k + Ars_L1k( area, H%aClRadi, gamma, srMw ) * branch
+    ENDIF
+    !
+    ! Assume HOCl is limiting, so recompute reaction rate accordingly
+    k = kIIR1Ltd( C(ind_HOCl), C(ind_SALACL), k )
+  END FUNCTION HOClUptkByBrSALA
+
+  FUNCTION HOClUptkByBrSALC( H ) RESULT( k )
+    !
+    ! Computes the uptake rate [1/s] for the HOCl + SALCCL reaction.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn rate [1/s]
+    !
+    REAL(dp) :: area,  branch, branchCl
+    REAL(dp) :: dummy, gamma,  srMw, k_tot
+    REAL(dp) :: k_HOCl_Cl, k_HOCl_Br
+    REAL(dp) :: k_HOCl_HSO3, k_HOCl_HSO3_2
+    !
+    k    = 0.0_dp
+    srMw = SR_MW(ind_HOCl)
+    !
+    ! Compute HOCl + SALACL uptake in tropospheric liquid cloud
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! HOCl + SALACL uptake coeff [1] & branch ratio [1], liquid path
+       CALL Gam_HOCl_Cld( H, gamma, k_tot,                 &
+                          k_HOCl_Cl, k_HOCl_Br,            &
+                          k_HOCl_HSO3, k_HOCl_HSO3_2        )
+        branch = ( k_HOCl_Br / k_tot ) * H%frac_Cl_CldC
+       !
+       ! HOCl + HCl uptake rate [1/s] accounting for cloud fraction
+       k = k + CloudHet( H, srMw, gamma, 0.0_dp, branch, 0.0_dp )
+    ENDIF
+    !
+    ! Compute HOCl + SALCCL uptake rate [1/s] on acidic aerosols in clear-sky
+    IF ( H%SSC_is_Acid ) THEN
+!       CALL Gam_HOCl_Aer( H, H%xRadi(SSC), H%H_conc_SSC, H%Cl_conc_SSC, gamma )
+       CALL Gam_HOCl_Aer( H, H%aClRadi, H%H_conc_SSA, H%Cl_conc_SSA,   &
+                          H%Br_conc_SSA, gamma )
+
+       ! Branching ratio (depends on Br- / Cl- ratio)
+       ! Assume same branching ratio for HOCl as HOBr for now
+       branch = 0.9_dp
+       IF ( H%Br_over_Cl_SSA <= 5.0e-4_dp ) THEN
+          branch = Br2_Yield( H%Br_over_Cl_SSA )
+       ENDIF
+
+!       area = H%ClearFr * H%xArea(SSC)
+       area = H%ClearFr * H%xArea(SSC) * (1.0_dp - H%f_Alk_SSC)
+       k    = k + Ars_L1k( area, H%xRadi(SSC), gamma, srMw ) * branch
+    ENDIF
+    !
+    ! Assume HOCl is limiting, so recompute reaction rate accordingly
+    k = kIIR1Ltd( C(ind_HOCl), C(ind_SALCCL), k )
+  END FUNCTION HOClUptkByBrSALC
+
+
   FUNCTION HOClUptkByHSO3m( H ) RESULT( k )
     !
     ! Computes the uptake rate [1/s] for the HOCl + HSO3- reaction.
@@ -2313,7 +2501,9 @@ CONTAINS
     REAL(dp)                   :: k              ! rxn rate [1/s]
     !
     REAL(dp) :: area,  branch, branchSO3
-    REAL(dp) :: dummy, gamma,  srMw
+    REAL(dp) :: dummy, gamma,  srMw, k_tot
+    REAL(dp) :: k_HOCl_Cl, k_HOCl_Br
+    REAL(dp) :: k_HOCl_HSO3, k_HOCl_HSO3_2
     !
     k    = 0.0_dp
     srMw = SR_MW(ind_HOCl)
@@ -2322,8 +2512,13 @@ CONTAINS
     IF ( .not. H%stratBox ) THEN
        !
        ! HOCl + HSO3- uptake coeff [1] & branch ratio [1], liquid path
-       CALL Gam_HOCl_Cld( H, gamma, dummy, branchSO3 )
-       branch = branchSO3 * H%frac_HSO3_aq
+!       CALL Gam_HOCl_Cld( H, gamma, dummy, branchSO3 )
+!       branch = branchSO3 * H%frac_HSO3_aq
+       CALL Gam_HOCl_Cld( H, gamma, k_tot,              &
+                          k_HOCl_Cl, k_HOCl_Br,         &
+                          k_HOCl_HSO3, k_HOCl_HSO3_2     )
+       branch = ( k_HOCl_HSO3 / k_tot ) * H%frac_HSO3_aq
+
        !
        ! HOCl + HSO3- uptake rate [1/s] accounting for cloud fraction
        k = k + CloudHet( H, srMw, gamma, 0.0_dp, branch, 0.0_dp )
@@ -2342,7 +2537,9 @@ CONTAINS
     REAL(dp)                   :: k              ! rxn rate [1/s]
     !
     REAL(dp) :: area,  branch, branchSO3
-    REAL(dp) :: dummy, gamma,  srMw
+    REAL(dp) :: dummy, gamma,  srMw, k_tot
+    REAL(dp) :: k_HOCl_Cl, k_HOCl_Br
+    REAL(dp) :: k_HOCl_HSO3, k_HOCl_HSO3_2
     !
     k    = 0.0_dp
     srMw = SR_MW(ind_HOCl)
@@ -2351,8 +2548,13 @@ CONTAINS
     IF ( .not. H%stratBox ) THEN
        !
        ! HOCl + SO3-- uptake coeff [1] & branch ratio [1], liquid path
-       CALL Gam_HOCl_Cld( H, gamma, dummy, branchSO3 )
-       branch = branchSO3 * H%frac_SO3_aq
+!       CALL Gam_HOCl_Cld( H, gamma, dummy, branchSO3 )
+!       branch = branchSO3 * H%frac_SO3_aq
+       CALL Gam_HOCl_Cld( H, gamma, k_tot,              &
+                          k_HOCl_Cl, k_HOCl_Br,         &
+                          k_HOCl_HSO3, k_HOCl_HSO3_2     )
+       branch = ( k_HOCl_HSO3_2 / k_tot ) * H%frac_SO3_aq
+
        !
        ! HOCl + SO3-- uptake rate [1/s] accounting for cloud fraction
        k = k + CloudHet( H, srMw, gamma, 0.0_dp, branch, 0.0_dp )
-- 
2.30.2


From f63830b8fdce090b4d630a0955e2dc70c8b753cb Mon Sep 17 00:00:00 2001
From: Becky Alexander <beckya@atmos.washington.edu>
Date: Fri, 5 Jul 2024 15:24:00 -0700
Subject: [PATCH 4/8] Remove H%HSO3m and H%SO3mm from second-order rate
 calculation for reaction of HOCl with HSO3- and SO32- because this is already
 taken care of in Gam_HOCl_Cld.

Signed-off-by: Becky Alexander <beckya@atmos.washington.edu>
---
 KPP/fullchem/fullchem_RateLawFuncs.F90 | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/KPP/fullchem/fullchem_RateLawFuncs.F90 b/KPP/fullchem/fullchem_RateLawFuncs.F90
index d843070b2..346c41066 100644
--- a/KPP/fullchem/fullchem_RateLawFuncs.F90
+++ b/KPP/fullchem/fullchem_RateLawFuncs.F90
@@ -2526,7 +2526,8 @@ CONTAINS
     !
     ! Assume HOCl is limiting, so recompute reaction rate accordingly
     ! Convert SO2 to HSO3- with the HSO3-/SO2 ratio
-    k = kIIR1Ltd( C(ind_HOCl), C(ind_SO2), k ) * H%HSO3m
+!    k = kIIR1Ltd( C(ind_HOCl), C(ind_SO2), k ) * H%HSO3m
+    k = kIIR1Ltd( C(ind_HOCl), C(ind_SO2), k ) 
   END FUNCTION HOClUptkByHSO3m
 
   FUNCTION HOClUptkBySO3mm( H ) RESULT( k )
@@ -2562,7 +2563,8 @@ CONTAINS
     !
     ! Assume HOCl is limiting, so recompute reaction rate accordingly
     ! Convert SO2 to SO3-- with the SO3--/SO2 ratio
-    k = kIIR1Ltd( C(ind_HOCl), C(ind_SO2), k ) * H%SO3mm
+!    k = kIIR1Ltd( C(ind_HOCl), C(ind_SO2), k ) * H%SO3mm
+    k = kIIR1Ltd( C(ind_HOCl), C(ind_SO2), k ) 
   END FUNCTION HOClUptkBySO3mm
 
   !=========================================================================
-- 
2.30.2


From e2f0b2dc57fa611802caaef9b527c7131dc67600 Mon Sep 17 00:00:00 2001
From: Becky Alexander <beckya@atmos.washington.edu>
Date: Fri, 5 Jul 2024 16:11:21 -0700
Subject: [PATCH 5/8] Added BrNO3 + Br-/Cl- = Br2/BrCl +HNO3 in tropospheric
 liquid cloud and aerosol.

---
 KPP/fullchem/commonIncludeVars.H       |   6 +-
 KPP/fullchem/fullchem.eqn              |   5 +
 KPP/fullchem/fullchem_RateLawFuncs.F90 | 289 ++++++++++++++++++++++++-
 3 files changed, 287 insertions(+), 13 deletions(-)

diff --git a/KPP/fullchem/commonIncludeVars.H b/KPP/fullchem/commonIncludeVars.H
index d788126eb..95ae1a9b4 100644
--- a/KPP/fullchem/commonIncludeVars.H
+++ b/KPP/fullchem/commonIncludeVars.H
@@ -139,9 +139,9 @@
      REAL(dp) :: Cl_conc_SSC    ! Cl- in coarse sea salt [mol/kg H2O]
      REAL(dp) :: cldFr          ! Cloud fraction
      REAL(dp) :: clearFr        ! Clear sky fraction
-     REAL(dp) :: frac_Br_CldA   ! Frac of Br- in fine SSA(in cloud)
-     REAL(dp) :: frac_Br_CldC   ! Frac of Br- in coarse SSA (in cloud)
-     REAL(dp) :: frac_Br_CldG   ! Frac of Br- in gas phase
+     REAL(dp) :: frac_Br_CldA   ! Frac of Br- from fine SSA(in cloud)
+     REAL(dp) :: frac_Br_CldC   ! Frac of Br- from coarse SSA (in cloud)
+     REAL(dp) :: frac_Br_CldG   ! Frac of Br- from gas phase
      REAL(dp) :: frac_Cl_CldA   ! Frac of Cl- in fine SSA (in cloud)
      REAL(dp) :: frac_Cl_CldC   ! Frac of Cl- in coarse SSA (in cloud)
      REAL(dp) :: frac_Cl_CldG   ! Frac of Cl- in gas phase
diff --git a/KPP/fullchem/fullchem.eqn b/KPP/fullchem/fullchem.eqn
index 28e005613..9d5ac4d7a 100644
--- a/KPP/fullchem/fullchem.eqn
+++ b/KPP/fullchem/fullchem.eqn
@@ -1433,6 +1433,11 @@ OH + SALACL = 0.500Cl2 :       OHuptkBySALACl( State_Het );
 OH + SALCCL = 0.500Cl2 :       OHuptkBySALCCl( State_Het );                                                 {2018/03/12; XW}
 BrNO3 + H2O = HOBr + HNO3 :    BrNO3uptkByH2O( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
 BrNO3 + HCl = BrCl + HNO3 :    BrNO3uptkByHCl( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
+BrNO3 + HBr = Br2 + HNO3 :     BrNO3uptkByHBr( State_Het ):                                                 {2024/07/05; BAlexander}
+BrNO3 + BrSALA = Br2 + HNO3 :  BrNO3uptkByBrSALA( State_Het ):                                              {2024/07/05; BAlexander}
+BrNO3 + BrSALC = Br2 + HNO3 :  BrNO3uptkByBrSALC( State_Het ):                                              {2024/07/05; BAlexander}
+BrNO3 + SALACl = BrCl + HNO3 : BrNO3uptkBySALACl( State_Het ):                                              {2024/07/05; BAlexander}
+BrNO3 + SALCCl = BrCl + HNO3 : BrNO3uptkBySALCCl( State_Het ):                                              {2024/07/05; BAlexander}
 ClNO3 + H2O = HOCl + HNO3 :    ClNO3uptkByH2O( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
 ClNO3 + HCl = Cl2 + HNO3 :     ClNO3uptkByHCl( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
 ClNO3 + HBr = BrCl + HNO3 :    ClNO3uptkByHBr( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
diff --git a/KPP/fullchem/fullchem_RateLawFuncs.F90 b/KPP/fullchem/fullchem_RateLawFuncs.F90
index 346c41066..ef72f5a63 100644
--- a/KPP/fullchem/fullchem_RateLawFuncs.F90
+++ b/KPP/fullchem/fullchem_RateLawFuncs.F90
@@ -807,27 +807,50 @@ CONTAINS
     TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
     REAL(dp)                   :: k              ! rxn rate [1/s]
     !
-    REAL(dp) :: gamma, gamLiq, gamIce, srMW      ! local vars
+!    REAL(dp) :: gamma, gamLiq, gamIce, srMW      ! local vars
+    REAL(dp) :: gamma, gammaIce, srMW      ! local vars
+    REAL(dp) :: area,       branchBr, branchLiq
+    REAL(dp) :: branchIce,  dum1,     dum2
+
     !
     k      = 0.0_dp
-    gamLiq = 0.0021_dp * TEMP - 0.561_dp         ! Rxn prob, liq (Deiber 2004)
-    gamIce = 5.3e-4_dp * EXP( 1100.0_dp / TEMP ) ! Rxn prob on ice
+!    gamLiq = 0.0021_dp * TEMP - 0.561_dp         ! Rxn prob, liq (Deiber 2004)
+!    gamIce = 5.3e-4_dp * EXP( 1100.0_dp / TEMP ) ! Rxn prob on ice
     srMw   = SR_MW(ind_BrNO3)
+
+    ! Rxn rate of BrNO3 + H2O on fine sea salt in clear sky
+    CALL Gam_BrNO3_Aer( H, H%Br_conc_SSA, gamma, branchBr )
+    area      = H%ClearFr * H%aClArea
+    branchLiq = ( 1.0_dp - branchBr ) * ( 1.0 - H%frac_SALACL )
+    k         = k + Ars_L1K( area, H%aClRadi, gamma, srMw ) * branchLiq
+
     !
     ! BrNO3 + H2O on sulfate and sea salt (clear sky)
-    gamma = gamLiq
-    k = k + Ars_L1K( H%ClearFr * H%xArea(SUL), H%xRadi(SUL), gamma, srMw )
-    k = k + Ars_L1K( H%ClearFr * H%xArea(SSA), H%xRadi(SSA), gamma, srMw )
-    k = k + Ars_L1K( H%ClearFr * H%xArea(SSC), H%xRadi(SSC), gamma, srMw )
-    k = k + H%xArea(SLA) * H%KHETI_SLA(BrNO3_plus_H2O)
+!    gamma = gamLiq
+!    k = k + Ars_L1K( H%ClearFr * H%xArea(SUL), H%xRadi(SUL), gamma, srMw )
+!    k = k + Ars_L1K( H%ClearFr * H%xArea(SSA), H%xRadi(SSA), gamma, srMw )
+!    k = k + Ars_L1K( H%ClearFr * H%xArea(SSC), H%xRadi(SSC), gamma, srMw )
+!    k = k + H%xArea(SLA) * H%KHETI_SLA(BrNO3_plus_H2O)
     !
     ! BrNO3 + H2O uptake on irregular ice cloud (clear sky)
     gamma = 0.3_dp                              ! rxn prob, ice [1]
     IF ( H%NatSurface ) gamma = 0.001_dp        ! rxn prob, NAT [1]
     k = k + Ars_L1K( H%ClearFr * H%xArea(IIC), H%xRadi(IIC), gamma, srMw )
+
+    IF ( .not. H%stratBox ) THEN
     !
     ! BrNO3 + H2O in tropospheric cloud
-    k = k + CloudHet( H, srMw, gamLiq, gamIce, 1.0_dp, 1.0_dp )
+!    k = k + CloudHet( H, srMw, gamLiq, gamIce, 1.0_dp, 1.0_dp )
+       CALL Gam_BrNO3_Aer( H, H%Br_conc_Cld, gamma, branchBr )
+       branchLiq = 1.0_dp - branchBr
+
+      ! ClNO3 + H2O uptake prob [1] in tropospheric ice cloud
+       CALL Gam_BrNO3_Ice( H, gammaIce, dum1, dum2, branchIce )
+
+       ! BrNO3 + H2O rxn rate in cloudy tropopsheric grid box
+       k = k + CloudHet( H, srMw, gamma, gammaIce, branchLiq, branchIce )
+
+    ENDIF
     !
     ! Assume BrNO3 is limiting, so update the removal rate accordingly
     k = kIIR1Ltd( C(ind_BrNO3), C(ind_H2O), k )
@@ -841,6 +864,7 @@ CONTAINS
     TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
     REAL(dp)                   :: k              ! rxn prob[1], rxn rate [1/s]
     REAL(dp)                   :: srMw           ! local vars
+    REAL(dp)                   :: gammaIce, branchIce, dum1, dum2
     !
     k    = 0.0_dp
     srMw = SR_MW(ind_BrNO3)
@@ -851,6 +875,10 @@ CONTAINS
        k = k + Ars_L1K( H%xArea(SUL), H%xRadi(SUL), 0.9_dp, srMw )
        k = k + H%xArea(SLA) * H%KHETI_SLA(BrNO3_plus_HCl)
        k = k + Ars_L1K( H%xArea(IIC), H%xRadi(IIC), 0.3_dp, srMw )
+    ELSE
+       ! BrNO3 + HCl uptake rate in tropospheric ice cloud
+       CALL Gam_BrNO3_Ice( H, gammaIce, branchIce, dum1, dum2 )
+       k = k + CloudHet( H, srMw, 0.0_dp, gammaIce, 0.0_dp, branchIce )
     ENDIF
 
     ! Assume BrNO3 is limiting, so update the removal rate accordingly
@@ -861,6 +889,237 @@ CONTAINS
 
   END FUNCTION BrNO3uptkByHCl
 
+  FUNCTION BrNO3uptkByHBr( H ) RESULT( k )
+    !
+    ! Computes the reaction rate [1/s] of BrNO3(g) + HBr-.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! Rxn rate [1/s]
+    !
+    REAL(dp) :: branchBr, branchLiq, branchIce, dum1
+    REAL(dp) :: dum2,     gamma,     gammaIce,  srMw
+    !
+    k    = 0.0_dp
+    srMw = SR_MW(ind_BrNO3)
+    !
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! BrNO3 + HBr uptake rate in tropospheric liquid cloud
+       CALL Gam_BrNO3_Aer( H, H%Br_conc_Cld, gamma, branchBr )
+       branchLiq = branchBr * H%frac_Br_CldG
+       !
+       ! no BrNO3 + HBr uptake rate in tropospheric ice cloud 
+       ! Note that this does happen for ClNO3 so may add later
+!       gammaIce  = 0.0_dp
+!       branchIce = 0.0_dp
+       ! BrNO3 + HBr uptake rate in tropospheric ice cloud
+       CALL Gam_BrNO3_Ice( H, gammaIce, dum1, branchIce, dum2 )       
+
+       ! ClNO3 + HBr overall uptake rate, accounting for cloud fraction
+       k = CloudHet( H, srMw, gamma, gammaIce, branchLiq, branchIce )
+    ENDIF
+    !
+    ! Assume ClNO3 is limiting, so recompute reaction rate accordingly
+    k = kIIR1Ltd( C(ind_BrNO3), C(ind_HBr), k )
+  END FUNCTION BrNO3uptkByHBr
+
+  FUNCTION BrNO3uptkByBrSALA( H ) RESULT( k )
+    !
+    ! Computes rxn rate [1/s] of BrNO3 + BrSALA.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! Rxn rate [1/s]
+    !
+    REAL(dp) :: area, branch, branchBr, gamma, srMw
+    !
+    k    = 0.0_dp
+    srMw = SR_MW(ind_BrNO3)
+    !
+    ! First compute uptake of BrNO3 + BrSALA in tropospheric cloud
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! Compute BrNO3 + BrSALA uptake rate & branching ratio
+       CALL Gam_BrNO3_Aer( H, H%Br_conc_Cld, gamma, branchBr )
+       branch = branchBr * H%frac_Br_CldA
+       !
+       ! Compute BrNO3 + BrSALA uptake rate accounting for cloud fraction
+       k = k + CloudHet( H, srMw, gamma, 0.0_dp, branch, 0.0_dp )
+    ENDIF
+    !
+    ! Compute uptake rate of BrNO3 + BrSALA in clear sky
+    CALL Gam_BrNO3_Aer( H, H%Br_conc_SSA, gamma, branchBr )
+    area = H%ClearFr * H%aClArea
+    k    = k + Ars_L1K( area, H%aClRadi, gamma, srMw ) * branchBr
+    !
+    ! Assume BrNO3 is limiting, so recompute reaction rate accordingly
+    k = kIIR1Ltd( C(ind_BrNO3), C(ind_BrSALA), k )
+  END FUNCTION BrNO3uptkByBrSALA
+
+  FUNCTION BrNO3uptkByBrSALC( H ) RESULT( k )
+    !
+    ! Computes rxn rate [1/s] of BrNO3 + BrSALC.
+    !
+    TYPE(HetState), INTENT(IN) :: H
+    REAL(dp)                   :: k
+    !
+    REAL(dp) :: area, branch, branchBr, gamma, srMw
+    !
+    k    = 0.0_dp
+    srMw = SR_MW(ind_BrNO3)
+    !
+    ! First compute uptake of BrNO3 + BrSALA in tropospheric cloud
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! Compute BrNO3 + BrSALA uptake rate & branching ratio
+       CALL Gam_BrNO3_Aer( H, H%Br_conc_Cld, gamma, branchBr )
+       branch = branchBr * H%frac_Br_CldC
+       !
+       ! Compute BrNO3 + BrSALC uptake rate accounting for cloud fraction
+       k = k + CloudHet( H, srMw, gamma, 0.0_dp, branch, 0.0_dp )
+    ENDIF
+    !
+    ! Compute uptake rate of BrNO3 + BrSALA in clear sky
+    CALL Gam_BrNO3_Aer( H, H%Br_conc_SSC, gamma, branchBr )
+    area = H%ClearFr * H%xArea(SSC)
+    k    = k + Ars_L1K( area, H%xRadi(SSC), gamma, srMw ) * branchBr
+    !
+    ! Assume ClNO3 is limiting, so recompute reaction rate accordingly
+    k = kIIR1Ltd( C(ind_BrNO3), C(ind_BrSALC), k )
+  END FUNCTION BrNO3uptkByBrSALC
+
+  FUNCTION BrNO3uptkBySALACL( H ) RESULT( k )
+    !
+    ! Computes rxn rate [1/s] of BrNO3 + SALACL.
+    !
+    TYPE(HetState), INTENT(IN) :: H
+    REAL(dp)                   :: k
+    !
+    REAL(dp) :: area, branch, branchBr, gamma, srMw
+    !
+    k    = 0.0_dp
+
+    IF ( H%stratBox ) RETURN
+
+    srMw = SR_MW(ind_BrNO3)
+    !
+    ! Compute uptake rate of ClNO3 + BrSALA in clear sky
+    CALL Gam_BrNO3_Aer( H, H%Br_conc_SSA, gamma, branchBr )
+    area   = H%ClearFr * H%aClArea
+    branch = ( 1.0_dp - branchBr ) * H%frac_SALACL
+    k      = k + Ars_L1K( area, H%aClRadi, gamma, srMw )* branch
+    !
+    ! Assume BrNO3 is limiting, so recompute reaction rate accordingly
+    k = kIIR1Ltd( C(ind_BrNO3), C(ind_SALACL), k )
+  END FUNCTION BrNO3uptkBySALACL
+
+  FUNCTION BrNO3uptkBySALCCL( H ) RESULT( k )
+    !
+    ! Computes rxn rate [1/s] of BrNO3 + SALCCL.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! Rxn rate [1/s]
+    !
+    REAL(dp) :: area, branch, branchBr, gamma, srMw
+    !
+    k    = 0.0_dp
+
+    IF ( H%stratBox ) RETURN
+
+    srMw = SR_MW(ind_BrNO3)
+    !
+    ! Compute uptake rate of ClNO3 + BrSALA in clear sky
+    CALL Gam_BrNO3_Aer( H, H%Br_conc_SSC, gamma, branchBr )
+    area   = H%ClearFr * H%xArea(SSC)
+    branch = 1.0 - branchBr
+    k      = k + Ars_L1K( area, H%xRadi(SSC), gamma, srMw )* branch
+    !
+    ! Assume BrNO3 is limiting, so recompute reaction rate accordingly
+    k = kIIR1Ltd( C(ind_BrNO3), C(ind_SALCCL), k )
+  END FUNCTION BrNO3uptkBySALCCL
+
+  SUBROUTINE Gam_BrNO3_Aer( H, C_Br, gamma, branchBr )
+    !
+    ! Calculates reactive uptake coefficients [1] for BrNO3 + Br- 
+    ! and BrNO3 + H2O.
+    ! Adding Cl- did not increase the rate beyond BrNO3 + H2O, 
+    ! so this isn't calculated separately [Dieber et al., 2004]
+    !
+    TYPE(HetState), INTENT(IN) :: H
+    REAL(dp), INTENT(IN)       :: C_Br     ! Br concentration (mol/L)
+    REAL(dp), INTENT(OUT)      :: gamma    ! Rxn prob [1]
+    REAL(dp), INTENT(OUT)      :: branchBr ! BrNO3 + HBr- branch ratio [1]
+    !
+    ! 1 / mass accum coeff
+    REAL(dp), PARAMETER :: INV_AB = 1.0_dp / 0.063_dp   ! 1 / mass accum coeff
+    ! H2k0 where H=henry's law constant and k0 = first-order rate 
+    ! constant for uptake of BrNO3 in H2O
+    ! The product of H and sqrt(k0) is experimentally determined (see IUPAC)
+    REAL(dp), PARAMETER :: K_0    = 1.2e+5_dp ** 2.0_dp 
+    ! Aqueous phase diffusion coefficient
+    REAL(dp), PARAMETER :: D_l    = 5.0e-6_dp           ! Deiber et al 2004
+    !
+    REAL(dp) :: M_X, cavg, k_Br, k_tot, gb0, gb2, gb_tot !gbr
+    !
+    ! thermal velocity (cm/s)
+    M_X      = MW(ind_BrNO3) * 1.0e-3_dp
+    cavg     = SQRT( EIGHT_RSTARG_T / ( H%PI * M_X ) ) * 100.0_dp
+    !
+    ! H2k2br cm2 s-1. H=henry's law constant, k2 = second order rate 
+    ! constant for ClNO3+Br
+    ! This is similar to K_0 above. k0 = k2 * [Br-]
+    k_Br     = 1.0e+12_dp * C_Br
+    !
+    ! Calculate gb1 for BrNO3 + Cl-
+    ! Following [Deiber et al., 2004], gamma is not significantly different
+    ! from BrNO3 + H2O (gamma = 0.0244) independent of Cl- concentration,
+    ! but BrCl rather than HOBr formed. gb2 can be calculated reversely from
+    ! gb1 = gb0 hydrolysis
+    gb0      = FOUR_R_T * 1.2e+5_dp * SQRT( D_l ) / cavg
+    ! k_tot is the first order rate constant for the sum of BrNO3+H2O and BrNO3+Br-
+    k_tot    = K_0 + k_Br                                    !H2(k0+k2Br)
+    gb_tot   = FOUR_R_T * SQRT( k_tot * D_l ) / cavg
+    !
+    ! Reaction probability for BrNO3 + Br- [1]
+    gamma    = 1.0_dp / ( INV_AB + 1.0_dp / gb_tot )
+    !
+    ! Branching ratio for ClNO3 + HBr-
+    ! NOTE: ClNO3 + Cl- branch ratio = 1.0 - branchBr
+    branchBr = k_Br / k_tot
+  END SUBROUTINE Gam_BrNO3_Aer
+
+  SUBROUTINE Gam_BrNO3_Ice( H, gamma, brHCl, brHBr, brH2O )
+    !
+    ! Computes the reactive uptake probability and branching ratio
+    ! for BrNO3 + H2O, ClNO3 + HCl, and ClNO3 + HBr in ice clouds
+    !
+    TYPE(HetState), INTENT(IN)  :: H             ! Hetchem State
+    REAL(dp),       INTENT(OUT) :: gamma         ! Uptake prob [1]
+    REAL(dp),       INTENT(OUT) :: brHCl         ! BrNO3 + HCl branch ratio
+    REAL(dp),       INTENT(OUT) :: brHBr         ! BrNO3 + HBr branch ratio
+    REAL(dp),       INTENT(OUT) :: brH2O         ! BrNO3 + H2O branch ratio
+    !
+    !
+    REAL(dp) :: g1, g2, g3
+    !
+    ! BrNO3 + HCl uptake probability [1] (Crowley et al., 2010)
+    g1    = 0.3_dp * H%HCl_theta
+    !
+    ! BrNO3 + HBr uptake probability [1] (Crowley et al., 2010)
+    g2    = 6.6e-3_dp * EXP( 700.0_dp / TEMP ) * H%HBr_theta
+    !
+    ! BrNO3 + H2O uptake probability [1] (Crowley et al., 2010)
+    g3    = 5.3e-4_dp * EXP( 1100.0_dp / TEMP )
+    !
+    ! Total reaction probability
+    gamma = g1 + g2 + g3
+    !
+    ! Branching ratios for each path (HCl, HBr, H2O)
+    brHCl = g1 / gamma
+    brHBr = g2 / gamma
+    brH2O = g3 / gamma
+  END SUBROUTINE Gam_BrNO3_Ice
+
+
   !=========================================================================
   ! Hetchem rate-law functions for ClNO2
   !=========================================================================
@@ -1095,6 +1354,9 @@ CONTAINS
   SUBROUTINE Gam_ClNO3_Aer( H, C_Br, gamma, branchBr )
     !
     ! Calculates reactive uptake coefficients [1] for ClNO3 + Br-.
+    ! and ClNO3 + H2O.
+    ! Adding Cl- did not increase the rate beyond ClNO3 + H2O, 
+    ! so this isn't calculated separately
     !
     !
     TYPE(HetState), INTENT(IN) :: H
@@ -1104,7 +1366,11 @@ CONTAINS
     !
     REAL(dp), PARAMETER :: INV_AB = 1.0_dp / 0.108_dp   ! 1 / mass accum coeff
     REAL(dp), PARAMETER :: K_0    = 1.2e+5_dp ** 2.0_dp ! H2k0
+    ! H2k0 where H=henry's law constant and k0 = first-order rate 
+    ! constant for uptake of ClNO3 in H2O
+    ! The product of H and sqrt(k0) is experimentally determined (see IUPAC)
     REAL(dp), PARAMETER :: D_l    = 5.0e-6_dp           ! Deiber et al 2004
+                                                        ! Aq. phase diff. coeff.
     !
     REAL(dp) :: M_X, cavg, k_Br, k_tot, gb0, gb2, gb_tot !gbr
     !
@@ -1112,7 +1378,9 @@ CONTAINS
     M_X      = MW(ind_ClNO3) * 1.0e-3_dp
     cavg     = SQRT( EIGHT_RSTARG_T / ( H%PI * M_X ) ) * 100.0_dp
     !
-    ! H2k2br cm2 s-1.
+    ! H2k2br cm2 s-1. H=henry's law constant, k2 = second order rate 
+    ! constant for ClNO3+Br
+    ! This is similar to K_0 above. k0 = k2 * [Br-]
     k_Br     = 1.0e+12_dp * C_Br
     !
     ! Calculate gb1 for ClNO3 + Cl-
@@ -1121,6 +1389,7 @@ CONTAINS
     ! but Cl2 rather than HOCl formed. gb2 can be calculated reversely from
     ! gb1 = gb0 hydrolysis
     gb0      = FOUR_R_T * 1.2e+5_dp * SQRT( D_l ) / cavg
+    ! k_tot is the first order rate constant for the sum of ClNO3+H2O and ClNO3+Br-
     k_tot    = K_0 + k_Br                                    !H2(k0+k2Br)
     gb_tot   = FOUR_R_T * SQRT( k_tot * D_l ) / cavg
     !
-- 
2.30.2


From 7074dcbed6556e162dc7f623c8b15f92c0032b9d Mon Sep 17 00:00:00 2001
From: Becky Alexander <beckya@atmos.washington.edu>
Date: Fri, 5 Jul 2024 16:56:03 -0700
Subject: [PATCH 6/8] Added IONO2 + Br- = IBr + HNO3 in clouds. Added reaction
 IONO2 + HBr Added functions Gam_IONO2_Aer and IONO2uptkByHBr Modified
 functions IONO2UPtkbyH2O and IbrkdnbyacidBrSALA/C Fixed types on
 BrNO3UptkbySALACl/SALCCl

---
 KPP/fullchem/fullchem.eqn              |  11 +-
 KPP/fullchem/fullchem_RateLawFuncs.F90 | 171 +++++++++++++++++++++++--
 2 files changed, 167 insertions(+), 15 deletions(-)

diff --git a/KPP/fullchem/fullchem.eqn b/KPP/fullchem/fullchem.eqn
index 9d5ac4d7a..392bf6f1e 100644
--- a/KPP/fullchem/fullchem.eqn
+++ b/KPP/fullchem/fullchem.eqn
@@ -1433,11 +1433,11 @@ OH + SALACL = 0.500Cl2 :       OHuptkBySALACl( State_Het );
 OH + SALCCL = 0.500Cl2 :       OHuptkBySALCCl( State_Het );                                                 {2018/03/12; XW}
 BrNO3 + H2O = HOBr + HNO3 :    BrNO3uptkByH2O( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
 BrNO3 + HCl = BrCl + HNO3 :    BrNO3uptkByHCl( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
-BrNO3 + HBr = Br2 + HNO3 :     BrNO3uptkByHBr( State_Het ):                                                 {2024/07/05; BAlexander}
-BrNO3 + BrSALA = Br2 + HNO3 :  BrNO3uptkByBrSALA( State_Het ):                                              {2024/07/05; BAlexander}
-BrNO3 + BrSALC = Br2 + HNO3 :  BrNO3uptkByBrSALC( State_Het ):                                              {2024/07/05; BAlexander}
-BrNO3 + SALACl = BrCl + HNO3 : BrNO3uptkBySALACl( State_Het ):                                              {2024/07/05; BAlexander}
-BrNO3 + SALCCl = BrCl + HNO3 : BrNO3uptkBySALCCl( State_Het ):                                              {2024/07/05; BAlexander}
+BrNO3 + HBr = Br2 + HNO3 :     BrNO3uptkByHBr( State_Het );                                                 {2024/07/05; BAlexander}
+BrNO3 + BrSALA = Br2 + HNO3 :  BrNO3uptkByBrSALA( State_Het );                                              {2024/07/05; BAlexander}
+BrNO3 + BrSALC = Br2 + HNO3 :  BrNO3uptkByBrSALC( State_Het );                                              {2024/07/05; BAlexander}
+BrNO3 + SALACl = BrCl + HNO3 : BrNO3uptkBySALACl( State_Het );                                              {2024/07/05; BAlexander}
+BrNO3 + SALCCl = BrCl + HNO3 : BrNO3uptkBySALCCl( State_Het );                                              {2024/07/05; BAlexander}
 ClNO3 + H2O = HOCl + HNO3 :    ClNO3uptkByH2O( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
 ClNO3 + HCl = Cl2 + HNO3 :     ClNO3uptkByHCl( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
 ClNO3 + HBr = BrCl + HNO3 :    ClNO3uptkByHBr( State_Het );                                                 {2014/02/03; Eastham2014; SDE}
@@ -1492,6 +1492,7 @@ IONO = ISALC + HNO2 :          IuptkByAlkSALC1stOrd( SR_MW(ind_IONO), 0.02_dp, S
 IONO2 = ISALA + HNO3 :         IuptkByAlkSALA1stOrd( SR_MW(ind_IONO2), 0.01_dp, State_Het );                {2022/12/02; Restored deleted rxn:BA}
 IONO2 = ISALC + HNO3 :         IuptkByAlkSALC1stOrd( SR_MW(ind_IONO2), 0.01_dp, State_Het );                {2022/12/02; Restored deleted rxn:BA}
 IONO2 + H2O = HOI + HNO3 :     IONO2uptkByH2O( State_Het );                                                 {2021/09/16 XW, TSherwen}
+IONO2 + HBr = IBr + HNO3 :     IONO2uptkByHBr( State_Het );                                                 {2024/07/05; BAlexander}
 IONO + BrSALA = IBr + HNO2 :   IbrkdnByAcidBrSALA( SR_MW(ind_IONO), C(ind_IONO), 0.02_dp, State_Het );      {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
 IONO + BrSALC = IBr + HNO2 :   IbrkdnByAcidBrSALC( SR_MW(ind_IONO), C(ind_IONO), 0.02_dp, State_Het );      {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
 IONO + SALACL = ICl + HNO2 :   IbrkdnByAcidSALACl( SR_MW(ind_IONO), C(ind_IONO), 0.02_dp, State_Het );      {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
diff --git a/KPP/fullchem/fullchem_RateLawFuncs.F90 b/KPP/fullchem/fullchem_RateLawFuncs.F90
index ef72f5a63..847958d3d 100644
--- a/KPP/fullchem/fullchem_RateLawFuncs.F90
+++ b/KPP/fullchem/fullchem_RateLawFuncs.F90
@@ -1002,8 +1002,8 @@ CONTAINS
 
     srMw = SR_MW(ind_BrNO3)
     !
-    ! Compute uptake rate of ClNO3 + BrSALA in clear sky
-    CALL Gam_BrNO3_Aer( H, H%Br_conc_SSA, gamma, branchBr )
+    ! Compute uptake rate of BrNO3 + SALACl in clear sky
+    CALL Gam_BrNO3_Aer( H, H%Cl_conc_SSA, gamma, branchBr )
     area   = H%ClearFr * H%aClArea
     branch = ( 1.0_dp - branchBr ) * H%frac_SALACL
     k      = k + Ars_L1K( area, H%aClRadi, gamma, srMw )* branch
@@ -1027,8 +1027,8 @@ CONTAINS
 
     srMw = SR_MW(ind_BrNO3)
     !
-    ! Compute uptake rate of ClNO3 + BrSALA in clear sky
-    CALL Gam_BrNO3_Aer( H, H%Br_conc_SSC, gamma, branchBr )
+    ! Compute uptake rate of BrNO3 + SALCCl in clear sky
+    CALL Gam_BrNO3_Aer( H, H%Cl_conc_SSC, gamma, branchBr )
     area   = H%ClearFr * H%xArea(SSC)
     branch = 1.0 - branchBr
     k      = k + Ars_L1K( area, H%xRadi(SSC), gamma, srMw )* branch
@@ -2841,6 +2841,57 @@ CONTAINS
   ! (HI, HOI, I2O2, I2O3, I2O4, IONO2, IONO3)
   !=========================================================================
 
+  SUBROUTINE Gam_IONO2_Aer( H, C_Br, gamma, branchBr )
+    !
+    ! Calculates reactive uptake coefficients [1] for IONO2 + Br- 
+    ! and IONO2 + H2O.
+    ! Rate constant information not available. Model after BrNO3.
+    ! Adding Cl- did not increase the rate beyond BrNO3 + H2O, 
+    ! so this isn't calculated separately [Dieber et al., 2004]
+    !
+    TYPE(HetState), INTENT(IN) :: H
+    REAL(dp), INTENT(IN)       :: C_Br     ! Br concentration (mol/L)
+    REAL(dp), INTENT(OUT)      :: gamma    ! Rxn prob [1]
+    REAL(dp), INTENT(OUT)      :: branchBr ! BrNO3 + HBr- branch ratio [1]
+    !
+    ! 1 / mass accum coeff
+    REAL(dp), PARAMETER :: INV_AB = 1.0_dp / 0.063_dp   ! 1 / mass accum coeff
+    ! H2k0 where H=henry's law constant and k0 = first-order rate 
+    ! constant for uptake of BrNO3 in H2O
+    ! The product of H and sqrt(k0) is experimentally determined (see IUPAC)
+    REAL(dp), PARAMETER :: K_0    = 1.2e+5_dp ** 2.0_dp 
+    ! Aqueous phase diffusion coefficient
+    REAL(dp), PARAMETER :: D_l    = 5.0e-6_dp           ! Deiber et al 2004
+    !
+    REAL(dp) :: M_X, cavg, k_Br, k_tot, gb0, gb2, gb_tot !gbr
+    !
+    ! thermal velocity (cm/s)
+    M_X      = MW(ind_IONO2) * 1.0e-3_dp
+    cavg     = SQRT( EIGHT_RSTARG_T / ( H%PI * M_X ) ) * 100.0_dp
+    !
+    ! H2k2br cm2 s-1. H=henry's law constant, k2 = second order rate 
+    ! constant for ClNO3+Br
+    ! This is similar to K_0 above. k0 = k2 * [Br-]
+    k_Br     = 1.0e+12_dp * C_Br
+    !
+    ! Calculate gb1 for IONO2 + Cl-
+    ! Following [Deiber et al., 2004], gamma is not significantly different
+    ! from BrNO3 + H2O (gamma = 0.0244) independent of Cl- concentration,
+    ! but BrCl rather than HOBr formed. gb2 can be calculated reversely from
+    ! gb1 = gb0 hydrolysis
+    gb0      = FOUR_R_T * 1.2e+5_dp * SQRT( D_l ) / cavg
+    ! k_tot is the first order rate constant for the sum of BrNO3+H2O and BrNO3+Br-
+    k_tot    = K_0 + k_Br                                    !H2(k0+k2Br)
+    gb_tot   = FOUR_R_T * SQRT( k_tot * D_l ) / cavg
+    !
+    ! Reaction probability for BrNO3 + Br- [1]
+    gamma    = 1.0_dp / ( INV_AB + 1.0_dp / gb_tot )
+    !
+    ! Branching ratio for BrNO3 + HBr-
+    ! NOTE: ClNO3 + Cl- branch ratio = 1.0 - branchBr
+    branchBr = k_Br / k_tot
+  END SUBROUTINE Gam_IONO2_Aer
+
   FUNCTION IuptkBySulf1stOrd( srMw, gamma, H ) RESULT( k )
     !
     ! Computes the reaction rate [1/s] for uptake of iodine species
@@ -2939,16 +2990,28 @@ CONTAINS
     TYPE(HetState), INTENT(IN) :: H
     REAL(dp)                   :: k
     REAL(dp)                   :: ssarea         ! acidic sea salt area
+    REAL(dp)                   :: branchBr, branch, gamma_cloud
     !
     ! Exit if in the stratosphere
     k = 0.0_dp
+
     IF ( H%stratBox ) RETURN
+
+      ! Compute IONO2 + BrSALA uptake rate & branching ratio in liquid cloud
+       CALL Gam_IONO2_Aer( H, H%Br_conc_Cld, gamma_cloud, branchBr )
+       branch = branchBr * H%frac_Br_CldA
+       !
+       ! Compute BrNO3 + BrSALA uptake rate accounting for cloud fraction
+       k = k + CloudHet( H, srMw, gamma_cloud, 0.0_dp, branch, 0.0_dp )
     !
     IF ( H%SSA_is_Acid ) THEN
        ssarea = H%f_Acid_SSA * H%xArea(SSA)
        k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSA), gamma, srMw )
-       k = kIIR1Ltd( conc, C(ind_BrSALA), k ) ! conc is limiting, so update k
+!       k = kIIR1Ltd( conc, C(ind_BrSALA), k ) ! conc is limiting, so update k
     ENDIF
+
+    k = kIIR1Ltd( conc, C(ind_BrSALA), k ) ! conc is limiting, so update k
+
   END FUNCTION IbrkdnbyAcidBrSALA
 
   FUNCTION IbrkdnByAcidBrSALC( srMw, conc, gamma, H ) RESULT( k )
@@ -2960,16 +3023,29 @@ CONTAINS
     TYPE(HetState), INTENT(IN) :: H
     REAL(dp)                   :: k
     REAL(dp)                   :: ssarea         ! acidic sea salt area
+    REAL(dp)                   :: branchBr
+    REAL(dp)                   :: branch, gamma_cloud
+
     !
     ! Exit if in the stratosphere
     k = 0.0_dp
     IF ( H%stratBox ) RETURN
+
+      ! Compute IONO2 + BrSALC uptake rate & branching ratio in trop. liq. clouds
+       CALL Gam_IONO2_Aer( H, H%Br_conc_Cld, gamma_cloud, branchBr )
+       branch = branchBr * H%frac_Br_CldC
+       !
+       ! Compute IONO2 + BrSALC uptake rate accounting for cloud fraction
+       k = k + CloudHet( H, srMw, gamma_cloud, 0.0_dp, branch, 0.0_dp )
     !
     IF ( H%SSC_is_Acid ) THEN
        ssarea = H%f_Acid_SSC * H%xArea(SSC)
        k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSC), gamma, srMw )
-       k = kIIR1Ltd( conc, C(ind_BrSALC), k ) ! conc is limiting, so update k
+!       k = kIIR1Ltd( conc, C(ind_BrSALC), k ) ! conc is limiting, so update k
     ENDIF
+
+       k = kIIR1Ltd( conc, C(ind_BrSALC), k ) ! conc is limiting, so update k
+
   END FUNCTION IbrkdnbyAcidBrSALC
 
   FUNCTION IbrkdnByAcidSALACl( srMw, conc, gamma, H ) RESULT( k )
@@ -2985,12 +3061,14 @@ CONTAINS
     ! Exit if in the stratosphere
     k = 0.0_dp
     IF ( H%stratBox ) RETURN
+
     !
     IF ( H%SSA_is_Acid ) THEN
        ssarea = H%f_Acid_SSA * H%xArea(SSA)
        k = 0.85_dp * Ars_L1K( ssarea, H%xRadi(SSA), gamma, srMw )
        k = kIIR1Ltd( conc, C(ind_SALACl), k ) ! conc is limiting, so update k
     ENDIF
+
   END FUNCTION IbrkdnbyAcidSALACl
 
   FUNCTION IbrkdnByAcidSALCCl( srMw, conc, gamma, H ) RESULT( k )
@@ -3214,14 +3292,24 @@ CONTAINS
     REAL(dp)                   :: k              ! Rxn rate [1/s]
     !
     REAL(dp) :: area, conc, gamma, srMw
+    REAL(dp) :: branchLiq, branchBr
+    REAL(dp) :: gammaIce, branchIce, dum1, dum2
+
     !
     k    = 0.0_dp
     srMw = SR_MW(ind_IONO2)
+
+    ! Rxn rate of IONO2 + H2O on fine sea salt in clear sky
+    CALL Gam_IONO2_Aer( H, H%Br_conc_SSA, gamma, branchBr )
+    area      = H%ClearFr * H%aClArea
+    branchLiq = ( 1.0_dp - branchBr ) * ( 1.0 - H%frac_SALACL )
+    k         = k + Ars_L1K( area, H%aClRadi, gamma, srMw ) * branchLiq
+
     !
     ! Tropopsheric sulfate (use T-dependent gamma, cf Deiber et al 2004)
-    area  = H%ClearFr * H%xArea(SUL)
-    gamma = MAX( ( 0.0021_dp * TEMP - 0.561_dp ), 0.0_dp )
-    k     = k + Ars_L1K( area, H%xRadi(SUL), gamma, srMw )
+!    area  = H%ClearFr * H%xArea(SUL)
+!    gamma = MAX( ( 0.0021_dp * TEMP - 0.561_dp ), 0.0_dp )
+!    k     = k + Ars_L1K( area, H%xRadi(SUL), gamma, srMw )
     !
     ! Stratospheric liquid aerosol
     k = k + H%xArea(SLA) * H%KHETI_SLA(BrNO3_plus_H2O)
@@ -3231,16 +3319,79 @@ CONTAINS
     gamma = 0.3_dp
     IF ( H%natSurface ) gamma = 0.001_dp
     k = k + Ars_L1K( area, H%xRadi(IIC), gamma, srMw )
+
+    IF ( .not. H%stratBox ) THEN
+
+    ! IONO2 + H2O in tropospheric cloud
+!    k = k + CloudHet( H, srMw, gamLiq, gamIce, 1.0_dp, 1.0_dp )
+       CALL Gam_IONO2_Aer( H, H%Br_conc_Cld, gamma, branchBr )
+       branchLiq = 1.0_dp - branchBr
+    !       
+
+       ! Assume no IONO2 + H2O in tropospheric ice cloud. 
+       ! Note that ClNO3 + H2O occurs on trop. ice cloud
+       gammaIce  =  0.0_dp
+       branchIce = 0.0_dp
+
+      ! IONO2 + H2O uptake prob [1] in tropospheric ice cloud.
+      ! use same rate parameters as for BrNO3 + H2O on trop. ice cloud
+       CALL Gam_BrNO3_Ice( H, gammaIce, dum1, dum2, branchIce )
+
+    ! Also account for cloudy grid box
+    ! Use gamma(liquid) = gamma(ice) = 0.01, to make the uptake coefficient
+    ! consistent with hydrolysis in aerosols (T. Sherwen, 28 Sep 2021)
+!    k = k + CloudHet( H, srMw, 0.01_dp, 0.01_dp, 1.0_dp, 1.0_dp )
+      k = k + CloudHet( H, srMw, gamma, gammaIce, branchLiq, branchIce )
+
+    ENDIF
+
     !
     ! Also account for cloudy grid box
     ! Use gamma(liquid) = gamma(ice) = 0.01, to make the uptake coefficient
     ! consistent with hydrolysis in aerosols (T. Sherwen, 28 Sep 2021)
-    k = k + CloudHet( H, srMw, 0.01_dp, 0.01_dp, 1.0_dp, 1.0_dp )
+!    k = k + CloudHet( H, srMw, 0.01_dp, 0.01_dp, 1.0_dp, 1.0_dp )
     !
     ! Assume IONO2 is limiting, so update the reaction rate accordingly
     k = kIIR1Ltd( C(ind_IONO2), C(ind_H2O), k )
   END FUNCTION IONO2uptkByH2O
 
+  FUNCTION IONO2uptkByHBr( H ) RESULT( k )
+    !
+    ! Computes the reaction rate [1/s] of IONO2(g) + HBr-.
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! Rxn rate [1/s]
+    !
+    REAL(dp) :: branchBr, branchLiq, branchIce, dum1
+    REAL(dp) :: dum2,     gamma,     gammaIce,  srMw
+    !
+    k    = 0.0_dp
+    srMw = SR_MW(ind_IONO2)
+    !
+    IF ( .not. H%stratBox ) THEN
+       !
+       ! BrNO3 + HBr uptake rate in tropospheric liquid cloud
+       CALL Gam_IONO2_Aer( H, H%Br_conc_Cld, gamma, branchBr )
+       branchLiq = branchBr * H%frac_Br_CldG
+       !
+       ! no BrNO3 + HBr uptake rate in tropospheric ice cloud 
+       ! Note that this does happen for ClNO3 so may add later
+ !      gammaIce  = 0.0_dp
+ !      branchIce = 0.0_dp
+       ! IONO2 + HBr uptake rate in tropospheric ice cloud
+       ! Use same rate parameters as for BrNO3 + HBr in ice cloud
+       CALL Gam_BrNO3_Ice( H, gammaIce, dum1, branchIce, dum2 )
+
+       !
+       ! ClNO3 + HBr overall uptake rate, accounting for cloud fraction
+       k = CloudHet( H, srMw, gamma, gammaIce, branchLiq, branchIce )
+    ENDIF
+    !
+    ! Assume ClNO3 is limiting, so recompute reaction rate accordingly
+    k = kIIR1Ltd( C(ind_IONO2), C(ind_HBr), k )
+  END FUNCTION IONO2uptkByHBr
+
+
   SUBROUTINE Gam_HOI_Cld( H,         gamma,     k_tot,                 &
                           k_HOI_Cl, k_HOI_Br, k_HOI_HSO3, k_HOI_HSO3_2 )
     !
-- 
2.30.2


From d91f5f3b8ebd41662776adb5a49c8f2409774068 Mon Sep 17 00:00:00 2001
From: Becky Alexander <beckya@atmos.washington.edu>
Date: Fri, 5 Jul 2024 17:16:23 -0700
Subject: [PATCH 7/8] Added IONO2 + HCl on ice clouds

---
 KPP/fullchem/fullchem.eqn              |  1 +
 KPP/fullchem/fullchem_RateLawFuncs.F90 | 26 ++++++++++++++++++++++++++
 2 files changed, 27 insertions(+)

diff --git a/KPP/fullchem/fullchem.eqn b/KPP/fullchem/fullchem.eqn
index 392bf6f1e..ed5063523 100644
--- a/KPP/fullchem/fullchem.eqn
+++ b/KPP/fullchem/fullchem.eqn
@@ -1493,6 +1493,7 @@ IONO2 = ISALA + HNO3 :         IuptkByAlkSALA1stOrd( SR_MW(ind_IONO2), 0.01_dp,
 IONO2 = ISALC + HNO3 :         IuptkByAlkSALC1stOrd( SR_MW(ind_IONO2), 0.01_dp, State_Het );                {2022/12/02; Restored deleted rxn:BA}
 IONO2 + H2O = HOI + HNO3 :     IONO2uptkByH2O( State_Het );                                                 {2021/09/16 XW, TSherwen}
 IONO2 + HBr = IBr + HNO3 :     IONO2uptkByHBr( State_Het );                                                 {2024/07/05; BAlexander}
+IONO2 + HCl = ICl + HNO3 :     IONO2uptkByHCl( State_Het );                                                 {2024/07/05; BAlexander}
 IONO + BrSALA = IBr + HNO2 :   IbrkdnByAcidBrSALA( SR_MW(ind_IONO), C(ind_IONO), 0.02_dp, State_Het );      {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
 IONO + BrSALC = IBr + HNO2 :   IbrkdnByAcidBrSALC( SR_MW(ind_IONO), C(ind_IONO), 0.02_dp, State_Het );      {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
 IONO + SALACL = ICl + HNO2 :   IbrkdnByAcidSALACl( SR_MW(ind_IONO), C(ind_IONO), 0.02_dp, State_Het );      {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
diff --git a/KPP/fullchem/fullchem_RateLawFuncs.F90 b/KPP/fullchem/fullchem_RateLawFuncs.F90
index 847958d3d..f2f2b2370 100644
--- a/KPP/fullchem/fullchem_RateLawFuncs.F90
+++ b/KPP/fullchem/fullchem_RateLawFuncs.F90
@@ -3391,6 +3391,32 @@ CONTAINS
     k = kIIR1Ltd( C(ind_IONO2), C(ind_HBr), k )
   END FUNCTION IONO2uptkByHBr
 
+  FUNCTION IONO2uptkByHCl( H ) RESULT( k )
+    !
+    ! Computes uptake rate for IONO2(g) + HCl(l,s)
+    ! in tropospheric ice clouds only
+    !
+    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
+    REAL(dp)                   :: k              ! rxn prob[1], rxn rate [1/s]
+    REAL(dp)                   :: srMw           ! local vars
+    REAL(dp)                   :: gammaIce, branchIce, dum1, dum2
+    !
+    k    = 0.0_dp
+    srMw = SR_MW(ind_IONO2)
+    !
+    ! Apply BrNO3 uptake in stratosphere
+    ! NOTE: NAT and ICE both use the same gamma = 0.3
+    IF ( .not. H %stratBox ) RETURN 
+ 
+       ! IONO2 + HCl uptake rate in tropospheric ice cloud
+       ! Use same rate parameters as for BrNO3 + HCl in trop. ice cloud
+       CALL Gam_BrNO3_Ice( H, gammaIce, branchIce, dum1, dum2 )
+       k = k + CloudHet( H, srMw, 0.0_dp, gammaIce, 0.0_dp, branchIce )
+
+    ! Assume IONO2 is limiting, so update the removal rate accordingly
+    k = kIIR1Ltd( C(ind_IONO2), C(ind_HCl), k )
+
+  END FUNCTION IONO2uptkByHCl
 
   SUBROUTINE Gam_HOI_Cld( H,         gamma,     k_tot,                 &
                           k_HOI_Cl, k_HOI_Br, k_HOI_HSO3, k_HOI_HSO3_2 )
-- 
2.30.2


From d843ae67c1eeefd74307c7597fdb5b88f6e21ca5 Mon Sep 17 00:00:00 2001
From: Becky Alexander <beckya@atmos.washington.edu>
Date: Fri, 12 Jul 2024 09:13:29 -0700
Subject: [PATCH 8/8] Made the HOI and IONO2 reactions with Br- and Cl- exactly
 like the analogous reactions for BrNO3. Before I had tried to keep these
 reactions as they were before but just added reactions in clouds.

---
 KPP/fullchem/fullchem.eqn              |   8 +-
 KPP/fullchem/fullchem_RateLawFuncs.F90 | 325 ++++++++++++++++++++-----
 2 files changed, 274 insertions(+), 59 deletions(-)

diff --git a/KPP/fullchem/fullchem.eqn b/KPP/fullchem/fullchem.eqn
index ed5063523..ec4ca2032 100644
--- a/KPP/fullchem/fullchem.eqn
+++ b/KPP/fullchem/fullchem.eqn
@@ -1498,10 +1498,10 @@ IONO + BrSALA = IBr + HNO2 :   IbrkdnByAcidBrSALA( SR_MW(ind_IONO), C(ind_IONO),
 IONO + BrSALC = IBr + HNO2 :   IbrkdnByAcidBrSALC( SR_MW(ind_IONO), C(ind_IONO), 0.02_dp, State_Het );      {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
 IONO + SALACL = ICl + HNO2 :   IbrkdnByAcidSALACl( SR_MW(ind_IONO), C(ind_IONO), 0.02_dp, State_Het );      {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
 IONO + SALCCL = ICl + HNO2 :   IbrkdnByAcidSALCCl( SR_MW(ind_IONO), C(ind_IONO), 0.02_dp, State_Het );      {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
-IONO2 + BrSALA = IBr + HNO3 :  IbrkdnByAcidBrSALA( SR_MW(ind_IONO2), C(ind_IONO2), 0.01_dp, State_Het );    {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
-IONO2 + BrSALC = IBr + HNO3 :  IbrkdnByAcidBrSALC( SR_MW(ind_IONO2), C(ind_IONO2), 0.01_dp, State_Het );    {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
-IONO2 + SALACL = ICl + HNO3 :  IbrkdnByAcidSALACl( SR_MW(ind_IONO2), C(ind_IONO2), 0.01_dp, State_Het );    {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
-IONO2 + SALCCL = ICl + HNO3 :  IbrkdnByAcidSALCCl( SR_MW(ind_IONO2), C(ind_IONO2), 0.01_dp, State_Het );    {2017/09/22; Sherwen2017;TS,JAS,SDE,XW}
+IONO2 + BrSALA = IBr + HNO3 :  IONO2UptkByAcidBrSALA( SR_MW(ind_IONO2), C(ind_IONO2), State_Het );          {2024/07/11; BAlexander}
+IONO2 + BrSALC = IBr + HNO3 :  IONO2UptkByAcidBrSALC( SR_MW(ind_IONO2), C(ind_IONO2), State_Het );          {2024/07/11; BAlexander}
+IONO2 + SALACL = ICl + HNO3 :  IONO2UptkByAcidSALACl( SR_MW(ind_IONO2), C(ind_IONO2), State_Het );          {2024/07/11; BAlexander}
+IONO2 + SALCCL = ICl + HNO3 :  IONO2UptkByAcidSALCCl( SR_MW(ind_IONO2), C(ind_IONO2), State_Het );          {2024/07/11; BAlexander}
 HOI + BrSALA = IBr :           HOIUptkByBrSALA( State_Het ) ;                                      ;        {2024/07/05; BAlexander}
 HOI + BrSALC = IBr :           HOIUptkByBrSALC( State_Het ) ;                                      ;        {2024/07/05; BAlexander}
 HOI + SALACL = ICl :           HOIUptkBySALACl( State_Het ) ;                                      ;        {2024/07/05; BAlexander}
diff --git a/KPP/fullchem/fullchem_RateLawFuncs.F90 b/KPP/fullchem/fullchem_RateLawFuncs.F90
index f2f2b2370..ff3619558 100644
--- a/KPP/fullchem/fullchem_RateLawFuncs.F90
+++ b/KPP/fullchem/fullchem_RateLawFuncs.F90
@@ -2981,6 +2981,7 @@ CONTAINS
     ENDIF
   END FUNCTION IuptkByAlkSALC1stOrd
 
+
   FUNCTION IbrkdnByAcidBrSALA( srMw, conc, gamma, H ) RESULT( k )
     !
     ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
@@ -2988,9 +2989,50 @@ CONTAINS
     !
     REAL(dp),       INTENT(IN) :: srMw, conc, gamma
     TYPE(HetState), INTENT(IN) :: H
+    REAL(dp)                   :: k, ssarea
+    !
+    ! Exit if in the stratosphere
+    k = 0.0_dp
+    IF ( H%stratBox ) RETURN
+    !
+    IF ( H%SSA_is_Acid ) THEN
+       ssarea = H%f_Acid_SSA * H%xArea(SSA)
+       k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gamma )
+       k = kIIR1Ltd( conc, C(ind_BrSALA), k ) ! conc is limiting, so update k
+    ENDIF
+  END FUNCTION IbrkdnbyAcidBrSALA
+
+  FUNCTION IbrkdnByAcidBrSALC( srMw, conc, gamma, H ) RESULT( k )
+    !
+    ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
+    ! Assume a ratio of IBr:ICl = 0.15:0.85
+    !
+    REAL(dp),       INTENT(IN) :: srMw, conc, gamma
+    TYPE(HetState), INTENT(IN) :: H
+    REAL(dp)                   :: k, ssarea
+    !
+    ! Exit if in the stratosphere
+    k = 0.0_dp
+    IF ( H%stratBox ) RETURN
+    !
+    IF ( H%SSC_is_Acid ) THEN
+       ssarea = H%f_Acid_SSC * H%xArea(SSC)
+       k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSC), srMw, gamma )
+       k = kIIR1Ltd( conc, C(ind_BrSALC), k ) ! conc is limiting, so update k
+    ENDIF
+  END FUNCTION IbrkdnbyAcidBrSALC
+
+  FUNCTION IONO2UptkByAcidBrSALA( srMw, conc, H ) RESULT( k )
+    !
+    ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
+    ! Assume a ratio of IBr:ICl = 0.15:0.85
+    !
+    REAL(dp),       INTENT(IN) :: srMw, conc
+    TYPE(HetState), INTENT(IN) :: H
     REAL(dp)                   :: k
     REAL(dp)                   :: ssarea         ! acidic sea salt area
     REAL(dp)                   :: branchBr, branch, gamma_cloud
+    REAL(dp)                   :: gamma_calc
     !
     ! Exit if in the stratosphere
     k = 0.0_dp
@@ -3005,25 +3047,26 @@ CONTAINS
        k = k + CloudHet( H, srMw, gamma_cloud, 0.0_dp, branch, 0.0_dp )
     !
     IF ( H%SSA_is_Acid ) THEN
+
+       CALL Gam_BrNO3_Aer( H, H%Br_conc_SSA, gamma_calc, branchBr )
        ssarea = H%f_Acid_SSA * H%xArea(SSA)
-       k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSA), gamma, srMw )
-!       k = kIIR1Ltd( conc, C(ind_BrSALA), k ) ! conc is limiting, so update k
+       k    = k + Ars_L1K( ssarea, H%aClRadi, gamma_calc, srMw ) * branchBr
     ENDIF
 
     k = kIIR1Ltd( conc, C(ind_BrSALA), k ) ! conc is limiting, so update k
 
-  END FUNCTION IbrkdnbyAcidBrSALA
+  END FUNCTION IONO2UptkByAcidBrSALA
 
-  FUNCTION IbrkdnByAcidBrSALC( srMw, conc, gamma, H ) RESULT( k )
+  FUNCTION IONO2UptkByAcidBrSALC( srMw, conc, H ) RESULT( k )
     !
     ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
     ! Assume a ratio of IBr:ICl = 0.15:0.85
     !
-    REAL(dp),       INTENT(IN) :: srMw, conc, gamma
+    REAL(dp),       INTENT(IN) :: srMw, conc
     TYPE(HetState), INTENT(IN) :: H
     REAL(dp)                   :: k
     REAL(dp)                   :: ssarea         ! acidic sea salt area
-    REAL(dp)                   :: branchBr
+    REAL(dp)                   :: branchBr, gamma
     REAL(dp)                   :: branch, gamma_cloud
 
     !
@@ -3039,14 +3082,16 @@ CONTAINS
        k = k + CloudHet( H, srMw, gamma_cloud, 0.0_dp, branch, 0.0_dp )
     !
     IF ( H%SSC_is_Acid ) THEN
+
+       CALL Gam_BrNO3_Aer( H, H%Br_conc_SSC, gamma, branchBr )
        ssarea = H%f_Acid_SSC * H%xArea(SSC)
-       k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSC), gamma, srMw )
-!       k = kIIR1Ltd( conc, C(ind_BrSALC), k ) ! conc is limiting, so update k
+       k    = k + Ars_L1K( ssarea, H%xRadi(SSC), gamma, srMw ) * branchBr
+
     ENDIF
 
        k = kIIR1Ltd( conc, C(ind_BrSALC), k ) ! conc is limiting, so update k
 
-  END FUNCTION IbrkdnbyAcidBrSALC
+  END FUNCTION IONO2UptkByAcidBrSALC
 
   FUNCTION IbrkdnByAcidSALACl( srMw, conc, gamma, H ) RESULT( k )
     !
@@ -3055,20 +3100,17 @@ CONTAINS
     !
     REAL(dp),       INTENT(IN) :: srMw, conc, gamma
     TYPE(HetState), INTENT(IN) :: H
-    REAL(dp)                   :: k
-    REAL(dp)                   :: ssarea         ! acidic sea salt area
+    REAL(dp)                   :: k, ssarea
     !
     ! Exit if in the stratosphere
     k = 0.0_dp
     IF ( H%stratBox ) RETURN
-
     !
     IF ( H%SSA_is_Acid ) THEN
        ssarea = H%f_Acid_SSA * H%xArea(SSA)
-       k = 0.85_dp * Ars_L1K( ssarea, H%xRadi(SSA), gamma, srMw )
+       k = 0.85_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gamma )
        k = kIIR1Ltd( conc, C(ind_SALACl), k ) ! conc is limiting, so update k
     ENDIF
-
   END FUNCTION IbrkdnbyAcidSALACl
 
   FUNCTION IbrkdnByAcidSALCCl( srMw, conc, gamma, H ) RESULT( k )
@@ -3078,19 +3120,73 @@ CONTAINS
     !
     REAL(dp),       INTENT(IN) :: srMw, conc, gamma
     TYPE(HetState), INTENT(IN) :: H
+    REAL(dp)                   :: k, ssarea
+    !
+    ! Exit if in the stratosphere
+    k = 0.0_dp
+    IF ( H%stratBox ) RETURN
+    !
+    IF ( H%SSC_is_Acid ) THEN
+       ssarea = H%f_Acid_SSC * H%xArea(SSC)
+       k = 0.85_dp * ARs_L1K( ssarea, H%xRAdi(SSC), srMw, gamma )
+       k = kIIR1Ltd( conc, C(ind_SALCCl), k ) ! conc is limiting, so update k
+    ENDIF
+  END FUNCTION IbrkdnbyAcidSALCCl
+
+  FUNCTION IONO2UptkByAcidSALACl( srMw, conc, H ) RESULT( k )
+    !
+    ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
+    ! Assume a ratio of IBr:ICl = 0.15:0.85
+    !
+    REAL(dp),       INTENT(IN) :: srMw, conc
+    TYPE(HetState), INTENT(IN) :: H
+    REAL(dp)                   :: k
+    REAL(dp)                   :: ssarea         ! acidic sea salt area
+    REAL(dp)                   :: branch, gamma, branchBr
+
+    k = 0.0_dp
+
+    ! Exit if in the stratosphere
+    IF ( H%stratBox ) RETURN
+
+    !
+    IF ( H%SSA_is_Acid ) THEN
+
+       CALL Gam_BrNO3_Aer( H, H%Cl_conc_SSA, gamma, branchBr )
+       ssarea = H%f_Acid_SSA * H%xArea(SSA)
+       branch = ( 1.0_dp - branchBr ) * H%frac_SALACL
+       k      = k + Ars_L1K( ssarea, H%aClRadi, gamma, srMw )* branch
+       k = kIIR1Ltd( conc, C(ind_SALACl), k ) ! conc is limiting, so update k
+
+    ENDIF
+
+  END FUNCTION IONO2UptkbyAcidSALACl
+
+  FUNCTION IONO2UptkByAcidSALCCl( srMw, conc, H ) RESULT( k )
+    !
+    ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
+    ! Assume a ratio of IBr:ICl = 0.15:0.85
+    !
+    REAL(dp),       INTENT(IN) :: srMw, conc
+    TYPE(HetState), INTENT(IN) :: H
     REAL(dp)                   :: k
     REAL(dp)                   :: ssarea         ! acidic sea salt area
+    REAL(dp)                   :: branch, gamma, branchBr
     !
     ! Exit if in the stratosphere
     k = 0.0_dp
     IF ( H%stratBox ) RETURN
     !
     IF ( H%SSC_is_Acid ) THEN
+
+       CALL Gam_BrNO3_Aer( H, H%Cl_conc_SSC, gamma, branchBr )
        ssarea = H%f_Acid_SSC * H%xArea(SSC)
-       k = 0.85_dp * ARs_L1K( ssarea, H%xRAdi(SSC), gamma, srMw )
+       branch = 1.0 - branchBr
+       k      = k + Ars_L1K( ssarea, H%xRadi(SSC), gamma, srMw )* branch
        k = kIIR1Ltd( conc, C(ind_SALCCl), k ) ! conc is limiting, so update k
+
     ENDIF
-  END FUNCTION IbrkdnbyAcidSALCCl
+  END FUNCTION IONO2UptkByAcidSALCCl
 
   FUNCTION HOIUptkByBrSALA( H ) RESULT( k )
     !
@@ -3106,7 +3202,8 @@ CONTAINS
     !
     k        = 0.0_dp
     brLiq    = 0.0_dp
-    gammaAer = 0.01_dp
+!    gammaAer = 0.01_dp
+    gammaAer = 0.0_dp
     gammaLiq = 0.0_dp
     srMw     = SR_MW(ind_HOI)
     !
@@ -3121,9 +3218,13 @@ CONTAINS
        CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                &
                         k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
        !
-       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
-       ! as in aerosol (IBr:ICl = 0.15:0.85)
-       brLiq = 0.15_dp * H%frac_Br_CldA
+        ! Branching ratio for liquid path of HOBr + BrSALA in cloud
+       branch_0 = ( k_HOI_Cl + k_HOI_Br ) / k_tot
+       branch   = branch_0 * 0.9_dp
+       IF ( H%Br_over_Cl_Cld <= 5.0e-4_dp ) THEN
+          branch = branch_0 * Br2_Yield( H%Br_over_Cl_Cld )
+       ENDIF
+       brLiq = branch * H%frac_Br_CldA
        !
        ! Compute overall HOI removal rate in cloud
        k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, brLiq, 0.0_dp )
@@ -3132,12 +3233,24 @@ CONTAINS
     !
     ! Now consider HOI uptake by acidic BrSALA in clear-sky
     IF ( H%SSA_is_Acid ) THEN
+
+       ! Uptake probability [1]
+       CALL Gam_HOI_Aer( H,             H%aClRadi,     H%H_conc_SSA,        &
+                          H%Cl_conc_SSA, H%Br_conc_SSA, gammaAer            )
+
+       ! Branching ratio (depends on Br- / Cl- ratio)
+       branch = 0.9_dp
+       IF ( H%Br_over_Cl_SSA <= 5.0e-4_dp ) THEN
+          branch = Br2_Yield( H%Br_over_Cl_SSA )
+       ENDIF
+
        ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSA) * H%xArea(SSA)
 !       k = 0.15_dp * IuptkBySALA1stOrd( srMw, gamma, H )
-       k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gammaAer )
-       k = kIIR1Ltd( C(ind_HOI), C(ind_BrSALA), k ) ! HOI is limiting, so update k
+       k = k + Ars_L1K( ssarea, H%xRadi(SSA), srMw, gammaAer ) * branch
     ENDIF
 
+       k = kIIR1Ltd( C(ind_HOI), C(ind_BrSALA), k ) ! HOI is limiting, so update k
+
   END FUNCTION HOIUptkByBrSALA
 
   FUNCTION HOIUptkByBrSALC( H ) RESULT( k )
@@ -3154,7 +3267,7 @@ CONTAINS
     !
     k        = 0.0_dp
     brLiq    = 0.0_dp
-    gammaAer = 0.01_dp
+    gammaAer = 0.0_dp
     gammaLiq = 0.0_dp
     srMw     = SR_MW(ind_HOI)
     !
@@ -3169,9 +3282,13 @@ CONTAINS
        CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                &
                         k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
        !
-       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
-       ! as in aerosol (IBr:ICl = 0.15:0.85)
-       brLiq = 0.15_dp * H%frac_Br_CldC
+       ! Branching ratio for liquid path of HOBr + BrSALC in cloud
+       branch_0 = ( k_HOI_Cl + k_HOI_Br ) / k_tot
+       branch   = branch_0 * 0.9_dp
+       IF ( H%Br_over_Cl_Cld <= 5.0e-4_dp ) THEN
+          branch = branch_0 * Br2_Yield( H%Br_over_Cl_Cld )
+       ENDIF
+       brLiq = branch * H%frac_Br_CldC
        !
        ! Compute overall HOBr removal rate in cloud
        k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, brLiq, 0.0_dp )
@@ -3179,13 +3296,24 @@ CONTAINS
 !    ENDIF
     !
     ! Now consider HOI uptake by acidic BrSALA in clear-sky
-    IF ( H%SSA_is_Acid ) THEN
-       ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSA) * H%xArea(SSA)
-!       k = 0.15_dp * IuptkBySALA1stOrd( srMw, gamma, H )
-       k = 0.15_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gammaAer )
-       k = kIIR1Ltd( C(ind_HOI), C(ind_BrSALC), k ) ! HOI is limiting, so update k
+    IF ( H%SSC_is_Acid ) THEN
+
+      ! Uptake probability [1]
+       CALL Gam_HOI_Aer( H,             H%xRadi(SSC),  H%H_conc_SSC,       &
+                          H%Cl_conc_SSC, H%Br_conc_SSC, gammaAer           )
+
+       ! Branching ratio (depends on Br- / Cl- ratio)
+       branch = 0.9_dp
+       IF ( H%Br_over_Cl_SSC <= 5.0e-4_dp ) THEN
+          branch = Br2_Yield( H%Br_over_Cl_SSC )
+       ENDIF
+
+       ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSC) * H%xArea(SSC)
+       k = k + Ars_L1K( ssarea, H%xRadi(SSC), srMw, gammaAer ) * branch
     ENDIF
 
+       k = kIIR1Ltd( C(ind_HOI), C(ind_BrSALC), k ) ! HOI is limiting, so update k
+
   END FUNCTION HOIUptkByBrSALC
 
   FUNCTION HOIUptkBySALACl( H ) RESULT( k )
@@ -3202,7 +3330,7 @@ CONTAINS
     !
     k        = 0.0_dp
     brLiq    = 0.0_dp
-    gammaAer = 0.01_dp
+    gammaAer = 0.0_dp
     gammaLiq = 0.0_dp
     srMw     = SR_MW(ind_HOI)
     !
@@ -3217,9 +3345,13 @@ CONTAINS
        CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,    &
             k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
        !
-       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
-       ! as in aerosol (IBr:ICl = 0.15:0.85)
-       brLiq = 0.85_dp * H%frac_Cl_CldA
+       ! Branching ratio for liquid path of HOBr + SALACL in cloud
+       branch_0 = ( k_HOI_Cl + k_HOI_Br ) / k_tot
+       branch   = branch_0 * 0.1_dp
+       IF ( H%Br_over_Cl_Cld <= 5.0e-4_dp ) THEN
+          branch = branch_0 * ( 1.0_dp - Br2_Yield( H%Br_over_Cl_Cld )  )
+       ENDIF
+       brLiq = branch * H%frac_Cl_CldA
        !
        ! Compute overall HOI removal rate in cloud
        k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, brLiq, 0.0_dp )
@@ -3228,12 +3360,24 @@ CONTAINS
     !
     ! Now consider HOI uptake by acidic SALACl in clear-sky
     IF ( H%SSA_is_Acid ) THEN
+
+       ! Uptake probability [1]
+       CALL Gam_HOI_Aer( H,             H%aClRadi,     H%H_conc_SSA,        &
+                          H%Cl_conc_SSA, H%Br_conc_SSA, gammaAer            )
+
+       ! Branching ratio (depends on Br- / Cl- ratio)
+       branch = 0.1_dp
+       IF ( H%Br_over_Cl_SSA <= 5.0e-4_dp ) THEN
+          branch = 1.0_dp - Br2_Yield( H%Br_over_Cl_SSA )
+       ENDIF
+
        ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSA) * H%xArea(SSA)
 !       k = 0.15_dp * IuptkBySALA1stOrd( srMw, gamma, H )
-       k = 0.85_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gammaAer )
-       k = kIIR1Ltd( C(ind_HOI), C(ind_SALACl), k ) ! HOI is limiting, so update k
+       k    = k + Ars_L1K( ssarea, H%aClRadi, gammaAer, srMw ) * branch
     ENDIF
 
+       k = kIIR1Ltd( C(ind_HOI), C(ind_SALACl), k ) ! HOI is limiting, so update k
+
   END FUNCTION HOIUptkBySALACl
 
   FUNCTION HOIUptkBySALCCl( H ) RESULT( k )
@@ -3250,7 +3394,7 @@ CONTAINS
     !
     k        = 0.0_dp
     brLiq    = 0.0_dp
-    gammaAer = 0.01_dp
+    gammaAer = 0.0_dp
     gammaLiq = 0.0_dp
     srMw     = SR_MW(ind_HOI)
     !
@@ -3265,9 +3409,13 @@ CONTAINS
        CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                 &
                         k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm )
        !
-       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
-       ! as in aerosol (IBr:ICl = 0.15:0.85)
-       brLiq = 0.85_dp * H%frac_Cl_CldC
+       ! Branching ratio for liquid path of HOBr + SALACL in cloud
+       branch_0 = ( k_HOI_Cl + k_HOI_Br ) / k_tot
+       branch   = branch_0 * 0.1_dp
+       IF ( H%Br_over_Cl_Cld <= 5.0e-4_dp ) THEN
+          branch = branch_0 * ( 1.0_dp -  Br2_Yield( H%Br_over_Cl_Cld ) )
+       ENDIF
+       brLiq = branch * H%frac_Cl_CldC
        !
        ! Compute overall HOBr removal rate in cloud
        k = k + CloudHet( H, srMw, gammaLiq, 0.0_dp, brLiq, 0.0_dp )
@@ -3275,13 +3423,24 @@ CONTAINS
 !    ENDIF
     !
     ! Now consider HOI uptake by acidic BrSALA in clear-sky
-    IF ( H%SSA_is_Acid ) THEN
-       ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSA) * H%xArea(SSA)
-!       k = 0.15_dp * IuptkBySALA1stOrd( srMw, gamma, H )
-       k = 0.85_dp * Ars_L1K( ssarea, H%xRadi(SSA), srMw, gammaAer )
-       k = kIIR1Ltd( C(ind_HOI), C(ind_SALCCl), k ) ! HOI is limiting, so update k
+    IF ( H%SSC_is_Acid ) THEN
+
+      ! Uptake probability [1]
+       CALL Gam_HOI_Aer( H,             H%xRadi(SSC),  H%H_conc_SSC,        &
+                         H%Cl_conc_SSC, H%Br_conc_SSC, gammaAer            )
+       !
+       ! Branching ratio (depends on Br- / Cl- ratio)
+       branch = 0.1_dp
+       IF ( H%Br_over_Cl_SSC <= 5.0e-4_dp ) THEN
+          branch = 1.0_dp - Br2_Yield( H%Br_over_Cl_SSC )
+       ENDIF
+
+       ssarea = H%ClearFr * (1.0_dp - H%f_Alk_SSC) * H%xArea(SSC)
+       k    = k + Ars_L1K( ssarea, H%xRadi(SSC), gammaAer, srMw ) * branch
     ENDIF
 
+       k = kIIR1Ltd( C(ind_HOI), C(ind_SALCCl), k ) ! HOI is limiting, so update k
+
   END FUNCTION HOIUptkBySALCCl
 
   FUNCTION IONO2uptkByH2O( H ) RESULT( k )
@@ -3371,8 +3530,8 @@ CONTAINS
     IF ( .not. H%stratBox ) THEN
        !
        ! BrNO3 + HBr uptake rate in tropospheric liquid cloud
-       CALL Gam_IONO2_Aer( H, H%Br_conc_Cld, gamma, branchBr )
-       branchLiq = branchBr * H%frac_Br_CldG
+!       CALL Gam_IONO2_Aer( H, H%Br_conc_Cld, gamma, branchBr )
+!       branchLiq = branchBr * H%frac_Br_CldG
        !
        ! no BrNO3 + HBr uptake rate in tropospheric ice cloud 
        ! Note that this does happen for ClNO3 so may add later
@@ -3384,7 +3543,7 @@ CONTAINS
 
        !
        ! ClNO3 + HBr overall uptake rate, accounting for cloud fraction
-       k = CloudHet( H, srMw, gamma, gammaIce, branchLiq, branchIce )
+       k = CloudHet( H, srMw, 0.0_dp, gammaIce, 0.0_dp, branchIce )
     ENDIF
     !
     ! Assume ClNO3 is limiting, so recompute reaction rate accordingly
@@ -3418,6 +3577,54 @@ CONTAINS
 
   END FUNCTION IONO2uptkByHCl
 
+  SUBROUTINE Gam_HOI_Aer( H, radius, C_Hp, C_Clm, C_Brm, gamma )
+    !
+    ! Returns uptake probability [1] for HOBr on aerosols.
+    !
+    TYPE(HetState), INTENT(IN)  :: H             ! Hetchem State
+    REAL(dp),       INTENT(IN)  :: radius        ! Aerosol radius
+    REAL(dp),       INTENT(IN)  :: C_Hp          ! H+ concentration
+    REAL(dp),       INTENT(IN)  :: C_Clm         ! Cl- concentration
+    REAL(dp),       INTENT(IN)  :: C_Brm         ! Br- concentration
+    REAL(dp),       INTENT(OUT) :: gamma         ! Uptake probability [1/s]
+    !
+    REAL(dp) :: M_X,   cavg,      H_X
+    REAL(dp) :: l_r,   C_Hp1,     C_Hp2
+    REAL(dp) :: k_tot, k_HOI_Cl, k_HOI_Br, gb_tot
+
+    !
+    REAL(dp), PARAMETER :: INV_AB = 1.0_dp / 0.6_dp ! Inv. mass accum coef
+    REAL(dp), PARAMETER :: D_l    = 1.4e-5_dp       ! Amman et al, ACP, 2013
+    !
+    ! Henry's law
+    H_X       = ( HENRY_K0(ind_HOI) * CON_ATM_BAR )                         &
+              * EXP( HENRY_CR(ind_HOI) * ( 1.0_dp/TEMP - INV_T298 ) )
+    !
+    ! Thermal velocity [cm/s]
+    M_X       = MW(ind_HOI) * 1.0e-3_dp
+    cavg      = SQRT( EIGHT_RSTARG_T / ( H%PI * M_X ) ) * 100.0_dp
+    !
+    ! Follow Roberts et al, (2014)
+    C_Hp1     = MAX( MIN( C_Hp, 1.0e-6_dp ), 1.0e-9_dp )
+    C_Hp2     = MAX( MIN( C_Hp, 1.0e-2_dp ), 1.0e-6_dp )
+    !
+    ! Rates for each HOBr + {Cl-, Br-} rxn
+    k_HOI_Cl = 2.3e+10_dp * C_Clm     * C_Hp1  ! Liu & Margerum, EST, 2001
+    k_HOI_Br = 1.6e+10_dp * C_Brm     * C_Hp2  ! ??
+    k_tot     = k_HOI_Cl  + k_HOI_Br
+    !
+    ! Compute reactive uptake coefficient [unitless], prevent div by zero
+    ! l_r is diffusive length scale [cm];
+    ! gb is Bulk reaction coefficient [unitless]
+    gamma     = 0.0_dp
+    IF ( k_tot > 0.0_dp ) THEN
+       l_r    = SQRT( D_l / k_tot )
+       gb_tot = FOUR_R_T * H_X * l_r * k_tot / cavg
+       gb_tot = gb_tot * ReactoDiff_Corr( radius, l_r )
+       gamma  = 1.0_dp / ( INV_AB + 1.0 / gb_tot )
+    ENDIF
+  END SUBROUTINE Gam_HOI_Aer
+
   SUBROUTINE Gam_HOI_Cld( H,         gamma,     k_tot,                 &
                           k_HOI_Cl, k_HOI_Br, k_HOI_HSO3, k_HOI_HSO3_2 )
     !
@@ -3541,9 +3748,13 @@ CONTAINS
        CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                 &
                         k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm  )
        !
-       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
-       ! as in aerosol (IBr:ICl = 0.15:0.85)
-       brLiq = 0.15_dp * H%frac_Br_CldG
+       ! Branching ratio for liquid path of HOBr + HBr
+       branch_0 = ( k_HOI_Cl + k_HOI_Br ) / k_tot
+       branch   = branch_0 * 0.9_dp
+       IF ( H%Br_over_Cl_Cld <=  5.0e-4_dp ) THEN
+          branch = branch_0 * Br2_Yield( H%Br_over_Cl_Cld )
+       ENDIF
+       brLiq = branch * H%frac_Br_CldG
        !
        ! Overall probability of HOI uptake and
        ! ice-path branching ratio for HOI + HBr
@@ -3601,9 +3812,13 @@ CONTAINS
        CALL Gam_HOI_CLD(H,         gammaLiq,  k_tot,                  &
                         k_HOI_Cl, k_HOI_Br, k_HOI_HSO3m, k_HOI_SO3mm   )
        !
-       ! Assume same branching ratio for liquid path of HOI + BrSALA in cloud
-       ! as in aerosol (IBr:ICl = 0.15:0.85)
-       brLiq = 0.85_dp * H%frac_Cl_CldG
+       ! Branching ratio for liquid path of HOBr + HCl
+       branch_0 = ( k_HOI_Cl + k_HOI_Br ) / k_tot
+       branch   = branch_0 * 0.1_dp
+       IF ( H%Br_over_Cl_Cld <= 5.0e-4_dp ) THEN
+          branch = branch_0 * ( 1.0_dp - Br2_Yield( H%Br_over_Cl_Cld ) )
+       ENDIF
+       brLiq = branch * H%frac_Cl_CldG
        !
        ! Overall probability of HOBr uptake and
        ! ice-path branching ratio for HOBr + HCl
-- 
2.30.2

